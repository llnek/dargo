/*Auto generated by Kirby v1.0.0 - Thu Feb 15 2018 17:48:44 GMT-0800 (PST)
  czlab.elmo.invaders.boot
{"doc" "" "author" ""}
*/

const kirbystdlibref = require("kirby");
const __module_namespace__ = "czlab.elmo.invaders.boot";
////////////////////////////////////////////////////////////////////////////////
//fn: [handleMultiDevices] in file: boot.ky, line: 9
const handleMultiDevices = function() {
  return (function() {
    let GS__2 = kirbystdlibref.getProp(_STAR_cfg_STAR, "handleDevices");
    let f = GS__2;
    return ((((typeof (GS__2) === "undefined")) || ((GS__2 === null))) ?
      handleMultiDevices_STAR() :
      f());
  }).call(this);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [handleMultiDevices*] in file: boot.ky, line: 15
const handleMultiDevices_STAR = function() {
  let landscape_QMRK = get_DASH_in(_STAR_cfg_STAR, ["game", "landscape?"]);
  let searches = jsb.fileUtils.getSearchPaths();
  let pcy = get_DASH_in(_STAR_cfg_STAR, ["resolution", "policy"]);
  let ps = [];
  let fsz = cx.screenSize();
  cc.log(["view.frameSize = [", fsz.width, ", ", fsz.height, "]"].join(""));
  if ( ((fsz.width >= 2048) || (fsz.height >= 2048)) ) {
    (
    ps = ["assets/res/hdr", "res/hdr"]);
    update_DASH_in_BANG(_STAR_cfg_STAR, ["resolution", "resDir"], function() {
      let ____args = Array.prototype.slice.call(arguments);
      return "hdr";
    });
    cx.setdr(landscape_QMRK, 2048, 1536, pcy);
  } else {
    if ( ((fsz.width >= 1136) || (fsz.height >= 1136)) ) {
      (
      ps = ["assets/res/hds", "res/hds"]);
      update_DASH_in_BANG(_STAR_cfg_STAR, ["resolution", "resDir"], function() {
        let ____args = Array.prototype.slice.call(arguments);
        return "hds";
      });
      cx.setdr(landscape_QMRK, 1136, 640, pcy);
    } else {
      if ( ((fsz.width >= 1024) || (fsz.height >= 1024)) ) {
        (
        ps = ["assets/res/hds", "res/hds"]);
        update_DASH_in_BANG(_STAR_cfg_STAR, ["resolution", "resDir"], function() {
          let ____args = Array.prototype.slice.call(arguments);
          return "hds";
        });
        cx.setdr(landscape_QMRK, 1024, 768, pcy);
      } else {
        if ( ((fsz.width >= 960) || (fsz.height >= 960)) ) {
          (
          ps = ["assets/res/hds", "res/hds"]);
          update_DASH_in_BANG(_STAR_cfg_STAR, ["resolution", "resDir"], function() {
            let ____args = Array.prototype.slice.call(arguments);
            return "hds";
          });
          cx.setdr(landscape_QMRK, 960, 640, pcy);
        } else {
          if (true) {
            (
            ps = ["assets/res/sd", "res/sd"]);
            update_DASH_in_BANG(_STAR_cfg_STAR, ["resolution", "resDir"], function() {
              let ____args = Array.prototype.slice.call(arguments);
              return "sd";
            });
            cx.setdr(landscape_QMRK, 480, 320, pcy);
          }
        }
      }
    }
  }
  ps.concat(["assets/src", "src"]).forEach(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return conj_BANG(searches, ____args[0]);
  });
  cc.log(["Resource search paths: ", K.prn(searches, true)].join(""));
  return searches;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [pvGatherPreloads] in file: boot.ky, line: 52
const pvGatherPreloads = function() {
  let lang = kirbystdlibref.getProp(_STAR_cfg_STAR, "lang");
  let assets = kirbystdlibref.getProp(_STAR_cfg_STAR, "assets");
  return [].concat(kirbystdlibref.getProp(assets, "fonts").map(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return sanitizeUrl(["res/fonts/", lang, "/", ____args[0]].join(""));
  })).concat(kirbystdlibref.getProp(assets, "images").map(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return sanitizeUrl(____args[0]);
  })).concat(kirbystdlibref.getProp(assets, "sounds").map(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return sanitizeUrl(____args[0]);
  })).concat(kirbystdlibref.getProp(assets, "plist").map(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return sanitizeUrl(____args[0]);
  })).concat(kirbystdlibref.getProp(assets, "tiles").map(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return sanitizeUrl(____args[0]);
  }));
};
defcz(MyLoaderScene, cc.Scene, init, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return true;
}, startToLoad, function() {
  let me = this;
  this.unschedule(this.startToLoad);
  return cc.loader.load(this.resources, function() {
    let ____args = Array.prototype.slice.call(arguments);
    return null;
  }, function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (((typeof (me.cb) === "function")) ?
      me.cb() :
      null);
  });
}, initWithResources, function(resources, cb) {
  return (this.resources = (resources || []), this.cb = cb);
}, onEnter, function() {
  cc.Node.prototype.onEnter.call(this);
  return this.schedule(this._startLoading, 0.3);
}, onExit, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return cc.Node.prototype.onExit.call(this);
});
//////////////////////////////////////////////////////////////////////////////;
////////////////////////////////////////////////////////////////////////////////
//fn: [preLaunchApp] in file: boot.ky, line: 81
const preLaunchApp = function() {
  let fz = cx.screenSize();
  let pfx = "";
  let paths,
    sz,
    rs,
    pcy;
  if (cc.sys.isNative) {
    let GS__3 = handleMultiDevices();
    let paths = GS__3;
    if ( (kirbystdlibref.count(GS__3) > 0) ) {
      jsb.fileUtils.setSearchPaths(paths);
    } else {
      null;
    }
  } else {
    (
    sz = get_DASH_in(_STAR_cfg_STAR, ["game", get_DASH_in(_STAR_cfg_STAR, ["resolution", "resDir"])]));
    cc.view.setDesignResolutionSize(sz.width, sz.height, get_DASH_in(_STAR_cfg_STAR, ["resolution", "web"]));
  }
  kirbystdlibref.getProp(_STAR_cfg_STAR, "handleResolution")(cc.view.getDesignResolutionSize());
  cc.director.setProjection(cc.Director.PROJECTION_2D);
  if ( (!cc.sys.isNative) ) {
    cc.view.resizeWithBrowserSize(true);
    cc.view.adjustViewPort(true);
    (
    pfx = "/public/elmo/res/");
  }
  if (get_DASH_in(_STAR_cfg_STAR, ["game", "debug?"])) {
    cc.director.setDisplayStats(get_DASH_in(_STAR_cfg_STAR, ["game", "showFPS?"]));
  }
  (rs = [[pfx, "cocos2d/pics/preloader_bar.png"].join(""), [pfx, "cocos2d/pics/ZotohLab.png"].join("")]);
  (
  cc.loaderScene = new MyLoaderScene());
  cc.loaderScene.init();
  cc.loaderScene.initWithResources(rs, function() {
    let ____args = Array.prototype.slice.call(arguments);
    return ldr.preload(pvGatherPreloads(), function() {
      kirbystdlibref.getProp(_STAR_cfg_STAR, "runOnce")();
      return cc.director.runScene(get_DASH_in(_STAR_cfg_STAR, ["game", "start"])());
    });
  });
  return cc.director.runScene(cc.loaderScene);
};
cc.log("About to create Cocos2D Game");
preLaunchApp();
l10nInit();
sfxInit();
cc.log("Registered game start state - ", get_DASH_in(_STAR_cfg_STAR, ["game", "start"]));
cc.log(ax.jsonfy(kirbystdlibref.getProp(_STAR_cfg_STAR, "game")));
cc.log("Loaded and running. OK");
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.elmo.invaders.boot",
    macros: {}
  },
  handleMultiDevices: handleMultiDevices
};