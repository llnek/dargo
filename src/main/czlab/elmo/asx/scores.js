/*Auto generated by Kirby v1.0.0 - Thu Feb 15 2018 01:29:50 GMT-0800 (PST)
  czlab.elmo.core.scores

*/

const kirbystdlibref = require("kirby");
const __module_namespace__ = "czlab.elmo.core.scores";
////////////////////////////////////////////////////////////////////////////////
//fn: [mkScore] in file: scores.ky, line: 6
const mkScore = function(n, v) {
  return {
    value: Number(v.trim()),
    name: n.trim()
  };
};
const HighScores = cc.Class.extend({
  read: function() {
    let s = (Cookies.get(this.KEY) || "");
    return (this.scores = s.split("|").reduce(function(memo, z) {
      let a = z.split(":");
      return ((2 === kirbystdlibref.count(a)) ?
        conj_BANG(memo, mkScore(kirbystdlibref.getProp(a, 0), kirbystdlibref.getProp(a, 1))) :
        memo);
    }, []));
  },
  reset: function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (this.scores = []);
  },
  write: function() {
    let rc = this.scores.map(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return [____args[0].name, ":", ____args[0].value].join("");
    });
    return Cookies.set(this.KEY, rc.join("|"), this.duration);
  },
  hasSlots_QMRK: function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (kirbystdlibref.count(this.scores) < this.size);
  },
  canAdd_QMRK: function(score) {
    return (this.hasSlots_QMRK() ?
      true :
      this.scores.some(function() {
        let ____args = Array.prototype.slice.call(arguments);
        return (____args[0].value < score);
      }));
  },
  insert: function(name, score) {
    let s = mkScore((name || "???"), score);
    let len = kirbystdlibref.count(this.scores);
    if ( (!this.hasSlots_QMRK()) ) {
      for (let i = (len - 1), ____break = false; ((!____break) && (i >= 0)); i = (i - 1)) {
        if ( (kirbystdlibref.getProp(this.scores, i).value < score) ) {
          this.scores.splice(i, 1);
          (
          ____break = true);
        }
      }
    }
    return (this.hasSlots_QMRK() ?
      (function() {
        conj_BANG(this.scores, s);
        this.sort();
        return this.write();
      }).call(this) :
      null);
  },
  getScores: function() {
    let ____args = Array.prototype.slice.call(arguments);
    return this.scores;
  },
  sort: function() {
    return Array.prototype.sort(this.scores, function(a, b) {
      return ((a.value < b.value) ?
        -1 :
        ((a.value > b.value) ?
          1 :
          0));
    });
  },
  ctor: function(key, size, duration) {
    this._super();
    return (this["duration"] = (duration || (60 * 60 * 24 * 1000)), this["size"] = (size || 10), this["scores"] = [], this["KEY"] = key);
  }
});
////////////////////////////////////////////////////////////////////////////////
//fn: [create] in file: scores.ky, line: 63
const create = function(key, size, duration) {
  return new HighScores();
};
const ____macros = {
  "defcz": "(macro* defcz (name par & more) (syntax-quote (const (unquote name) (.extend (unquote par) (object (splice-unquote more))))))"
};
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.elmo.core.scores",
    macros: ____macros
  },
  mkScore: mkScore,
  HighScores: HighScores,
  create: create
};