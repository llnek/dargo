(ns czlab.elmo.core.ui)

(defmacro defcz "" [name par & more] `(const ~name (.extend ~par (object ~@more ))))

(defcz Circle cc/Class
  draw
  (fn [ctx styleObj]
    (.beginPath ctx)
    (set! ctx.strokeStyle styleObj.stroke.style)
    (set! ctx.lineWidth styleObj.line.width)
    (.arc ctx @@x @@y @@radius 0 (* 2 Math/PI) #t)
    (.stroke ctx))
  ctor
  (fn [x y radius]
    (._super this)
    (assign! this :x x :y y :radius radius)))

(defcz Line cc/Class
  draw
  (fn [ctx styleObj]
    (.beginPath ctx)
    (.moveTo ctx @@x1 @@y1)
    (.lineTo ctx @@x2 @@y2)
    (set! ctx.strokeStyle styleObj.stroke.style)
    (set! ctx.lineWidth styleObj.line.width)
    (if (some? styleObj.line.cap)
      (set! ctx.lineCap styleObj.line.cap))
    (.stroke ctx))
  ctor
  (fn [x1 y1 x2 y2]
    (._super this)
    (assign! this :x1 x1 :y1 y1 :x2 x2 :y2 y2)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcz TextStyle cc/Class
  ctor
  (fn []
    (._super this)
    (assign! this
             :align :left
             :base :top
             :fill "#dddddd"
             :font "14px 'Architects Daughter'")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF


