/*Auto generated by Kirby v1.0.0 - Tue Feb 13 2018 02:33:27 GMT-0800 (PST)
  czlab.elmo.asx.loader
{"doc" "" "author" "Kenneth Leung"}
*/

const K = require("kirby");
const opt_QMRK__QMRK = K["opt_QMRK__QMRK"];
const kirbystdlibref = require("kirby");
const __module_namespace__ = "czlab.elmo.asx.loader";
var _STAR_instance_STAR = null;
const _STAR_chunk_STAR = 36;
const XLoader = cc.Scene.extend({
  ctor: function() {
    this._super();
    (
    this.bgLayer = new cc.LayerColor(cc.Color.prototype.BLACK));
    this.bgLayer.setPosition(0, 0);
    this.addChild(this.bgLayer);
    return this;
  },
  pkLoad: function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (function() {
      let cw = cx.vcenter();
      let pfx = "/public/res/";
      let s1 = null;
      let s2 = null;
      if (cc.sys.isNative) {
        (
        pfx = "");
      }
      this.unschedule(this.pkLoad);
      (
      this.logoSprite = new cc.Sprite([pfx, "cocos2d/pics/ZotohLab.png"].join("")));
      logoSpritw.setPosition(cw);
      this.bgLayer.addChild(logoSprite);
      (
      this.progress = new cc.ProgressTimer(new cc.Sprite([pfx, "cocos2d/pics/preloader_bar.png"].join(""))));
      this.progress.setType(cc.ProgressTimer.TYPE_BAR);
      this.progress.setScaleX(0.8);
      this.progress.setScaleY(0.3);
      this.progress.setPosition(this.logoSprite.getPositionX(), (cw.y - (0.6 * getHeight(this.logoSprite))));
      this.bgLayer.addChild(this.progress);
      return this.pkStartLoading();
    }).call(this);
  },
  onEnter: function() {
    cc.Node.prototype.onEnter.call(this);
    return this.schedule(this.pkLoad, 0.3);
  },
  onExit: function() {
    let ____args = Array.prototype.slice.call(arguments);
    return cc.Node.prototype.onExit.call(this);
  },
  initWithResources: function(resources, selector, target) {
    return (this["resources"] = resources, this["selector"] = selector, this["target"] = target);
  },
  niceFadeOut: function() {
    this.unscheduleUpdate();
    return this.logoSprite.runAction(cc.Sequence.create(cc.FadeOut.create(1.2), cc.CallFunc.create(this.selector, this.target)));
  },
  loadChunk: function() {
    let res = this.resources;
    let me = this;
    let s = kirbystdlibref.getProp(this._pres, 0);
    let e = kirbystdlibref.getProp(this._pres, 1);
    return cc.loader.load(res.slice(s, e), function(result, total, cnt) {
      return (me._count += 1);
    }, function() {
      return (me._pres[2] = true);
    });
  },
  pkStartLoading: function() {
    let res = this.resources;
    let me = this;
    (this._pres = [0, Math.min(_STAR_chunk_STAR, res.length), false], this._count = 0);
    this.schedule(this.update, 0.25);
    return this.loadChunk();
  },
  update: function() {
    let len = this.resources.length;
    let cnt = this._count;
    let ratio = (cnt / len);
    let s = null;
    let e = null;
    let perc = Math.min((ratio * 100), 100);
    this.progress.setPercentage(perc);
    return ((cnt >= len) ?
      (function() {
        this.unscheduleUpdate();
        return this.niceFadeOut();
      }).call(this) :
      (((kirbystdlibref.getProp(this._pres, 2) === true)) ?
        (function() {
          (s = kirbystdlibref.getProp(this._pres, 1), e = (s + Math.min(_STAR_chunk_STAR, (len - s))));
          (this._pres[0] = s, this._pres[1] = e, this._pres[2] = false);
          return this.loadChunk();
        }).call(this) :
        null));
  }
});
////////////////////////////////////////////////////////////////////////////////
//fn: [preload] in file: loader.ky, line: 107
const preload = function(resources, selector, target) {
  if ( (!_STAR_instance_STAR) ) {
    (
    _STAR_instance_STAR = new XLoader());
  } else {
    null;
  }
  _STAR_instance_STAR.initWithResources(resources, selector, target);
  cc.director.runScene(_STAR_instance_STAR);
  return _STAR_instance_STAR;
};
const ____macros = {
  "defcz": "(macro* defcz (name par & more) (syntax-quote (const (unquote name) (.extend (unquote par) (splice-unquote more)))))"
};
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.elmo.asx.loader",
    macros: ____macros
  },
  _STAR_chunk_STAR: _STAR_chunk_STAR,
  XLoader: XLoader,
  preload: preload
};