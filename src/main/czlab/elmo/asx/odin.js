/*Auto generated by Kirby v1.0.0 - Thu Feb 15 2018 02:05:18 GMT-0800 (PST)
  czlab.elmo.core.odin

*/

const kirbystdlibref = require("kirby");
const __module_namespace__ = "czlab.elmo.core.odin";
const _STAR_OdinEvents_STAR = {
  MSG_NETWORK: 1,
  MSG_SESSION: 2,
  PLAYGAME_REQ: 3,
  JOINGAME_REQ: 4,
  PLAYREQ_NOK: 10,
  JOINREQ_NOK: 11,
  USER_NOK: 12,
  GAME_NOK: 13,
  ROOM_NOK: 14,
  ROOM_FILLED: 15,
  ROOMS_FULL: 16,
  PLAYREQ_OK: 30,
  JOINREQ_OK: 31,
  AWAIT_START: 40,
  SYNC_ARENA: 45,
  POKE_RUMBLE: 46,
  RESTART: 50,
  START: 51,
  STOP: 52,
  POKE_MOVE: 53,
  POKE_WAIT: 54,
  PLAY_MOVE: 55,
  REPLAY: 56,
  QUIT_GAME: 60,
  PLAYER_JOINED: 90,
  STARTED: 95,
  CONNECTED: 98,
  ERROR: 99,
  CLOSED: 100,
  S_NOT_CONNECTED: 0,
  S_CONNECTED: 1
};
////////////////////////////////////////////////////////////////////////////////
//fn: [mkEvent] in file: odin.ky, line: 51
const mkEvent = function(eventType, code, payload) {
  return {
    timeStamp: cx.nowMillis(),
    etype: eventType,
    ecode: code,
    source: payload
  };
};
////////////////////////////////////////////////////////////////////////////////
//fn: [mkPlayRequest] in file: odin.ky, line: 58
const mkPlayRequest = function(game, user, pwd) {
  return mkEvent(_STAR_OdinEvents_STAR.PLAYGAME_REQ, -1, [game, user, pwd]);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [mkJoinRequest] in file: odin.ky, line: 62
const mkJoinRequest = function(room, user, pwd) {
  return mkEvent(_STAR_OdinEvents_STAR.JOINGAME_REQ, -1, [room, user, pwd]);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [json_decode] in file: odin.ky, line: 66
const json_decode = function(e) {
  let evt = {};
  let src = null;
  try {
    (
    evt = ax.objectfy(e.data));
  } catch (ewroewrwe) {
    null;
  }
  if ( (!contains_QMRK(evt, "etype")) ) {
    (
    evt["etype"] = -1);
  } else {
    null;
  }
  if ( (!contains_QMRK(evt, "ecode")) ) {
    (
    evt["ecode"] = -1);
  } else {
    null;
  }
  if ( (contains_QMRK(evt, "source") && ((typeof (evt.source) === "string"))) ) {
    (
    evt["source"] = ax.objectfy(evt.source));
  }
  return evt;
};
const Session = cc.Class.extend({
  connect: function() {
    let ____args = Array.prototype.slice.call(arguments);
    return this.wsock(____args[0]);
  },
  ctor: function(config) {
    return (this["state"] = _STAR_OdinEvents_STAR.S_NOT_CONNECTED, this["options"] = (config || {}), this["ebus"] = new Ebus(), this["handlers"] = [], this["ws"] = null);
  },
  send: function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (((this.state === _STAR_OdinEvents_STAR.S_CONNECTED) && some_QMRK(this.ws)) ?
      this.ws.send(sjs.jsonfy(____args[0])) :
      null);
  },
  listen: function(messageType, event, callback, target) {
    let h = this.ebus.on([messageType, ".", event].join(""), callback, target);
    return (((Array.isArray(h)) && not_DASH_empty(h)) ?
      (function() {
        conj_BANG(this.handlers, kirbystdlibref.getProp(h, 0));
        return kirbystdlibref.getProp(h, 0);
      }).call(this) :
      null);
  },
  listenAll: function(callback, target) {
    return [this.listen(_STAR_OdinEvents_STAR.MSG_NETWORK, "*", callback, target), this.listen(_STAR_OdinEvents_STAR.MSG_SESSION, "*", callback, target)];
  },
  cancelAll: function() {
    this.ebus.removeAll();
    return (this.handlers = []);
  },
  cancel: function(sid) {
    sjs.removeFromArray(this.handlers, sid);
    return this.ebus.off(sid);
  },
  reset: function() {
    (this["onmessage"] = function() {
      let ____args = Array.prototype.slice.call(arguments);
      return null;
    }, this["onerror"] = function() {
      let ____args = Array.prototype.slice.call(arguments);
      return null;
    }, this["onclose"] = function() {
      let ____args = Array.prototype.slice.call(arguments);
      return null;
    }, this["handlers"] = []);
    return this.ebus.removeAll();
  },
  close: function() {
    (
    this.state = _STAR_OdinEvents_STAR.S_NOT_CONNECTED);
    this.reset();
    try {
      if (this.ws) {
        this.ws.close();
      }
    } catch (ewroewrwe) {
      null;
    }
    return (this.ws = null);
  },
  disconnect: function() {
    let ____args = Array.prototype.slice.call(arguments);
    return this.close();
  },
  onNetworkMsg: function(evt) {},
  onSessionMsg: function(evt) {},
  wsock: function(url) {
    let ws = new WebSocket(url);
    let me = this;
    (ws["onopen"] = function() {
      (
      me.state = _STAR_OdinEvents_STAR.S_CONNECTED);
      return ws.send(me.getPlayRequest());
    }, ws["onmessage"] = function(e) {
      let evt = json_decode(e);
      return (function() {
        let C__2;
        switch (evt.etype) {
          case _STAR_OdinEvents_STAR.MSG_NETWORK:
          case _STAR_OdinEvents_STAR.MSG_SESSION:
            C__2 = me.onevent(evt);
            break;
          default:
            C__2 = cc.warn(["unhandled server event: ", evt.etype, ", code = ", evt.ecode].join(""));
            break;
        }
        return C__2;
      }).call(this);
    }, ws["onclose"] = function() {
      let ____args = Array.prototype.slice.call(arguments);
      return cc.log("closing websocket.");
    }, ws["onerror"] = function() {
      let ____args = Array.prototype.slice.call(arguments);
      return cc.error(["websocket error.\n", ____args[0]].join(""));
    });
    return this.ws;
  },
  getPlayRequest: function() {
    let ____args = Array.prototype.slice.call(arguments);
    return sjs.jsonfy(mkPlayRequest(this.options.game, this.options.user, this.options.passwd));
  },
  onevent: function() {
    let ____args = Array.prototype.slice.call(arguments);
    return this.ebus.fire([evt.etype, ".", evt.ecode].join(""), evt);
  }
});
////////////////////////////////////////////////////////////////////////////////
//fn: [createSession] in file: odin.ky, line: 163
const createSession = function(cfg) {
  return new Session(cfg);
};
const ____macros = {
  "defcz": "(macro* defcz (name par & more) (syntax-quote (const (unquote name) (.extend (unquote par) (object (splice-unquote more))))))"
};
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.elmo.core.odin",
    macros: ____macros
  },
  _STAR_OdinEvents_STAR: _STAR_OdinEvents_STAR,
  mkEvent: mkEvent,
  mkPlayRequest: mkPlayRequest,
  mkJoinRequest: mkJoinRequest,
  json_decode: json_decode,
  Session: Session,
  createSession: createSession
};