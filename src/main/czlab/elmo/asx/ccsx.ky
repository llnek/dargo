
(ns ^{:doc ""
      :author "Kenneth Leung"}
  czlab.elmo.core.ccsx
  (:require ["kirby" :as K :refer [opt??]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmacro div2 "" [x] `(* 0.5 ~x))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn pointInBox? "" [box x & [y]]
  (var [px py] (if-not (number? x) [x.x x.y] [x y]))
  (and (>= px box.left)
       (<= px box.right)
       (>= py box.bottom)
       (<= py box.top)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn collide? "" [a b]
  (cond
    (and (inst? cc/Sprite a)
         (inst? cc/Sprite b))
    (collide? (bbox a) (bbox b))
    (and a b
         (def? a.sprite)
         (def? b.sprite) a.sprite b.sprite)
    (collide? a.sprite b.sprite)
    (and a b)
    (cc/rectIntersectsRect a b)
    :else false))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setDesignResSize "" [landscape? w h pcy]
  (var [x y] (if landscape? [w h] [h w]))
  (do->nil (.setDesignResolutionSize cc/view x y pcy)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn isPortrait? "" [] (var s (screenSize)) (> s.height s.width))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn outOfBound? "" [e B]
  (if e (asx/outOfBound? (bbox4 e.sprite) (or B (vbox)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn undoTimer "" [par tm]
  (do->nil (if (and cc.sys.isNative tm) (.release tm))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createTimer "" [par tm]
  (var rc (->> (new cc/DelayTime tm)
               (.runAction par )))
  (if cc.sys.isNative (.retain rc)) rc)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn timerDone? "" [t] (if t (.isDone t)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createSpriteFrame "" [frame] (new cc/Sprite frame))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn bbox4 "" [s]
  `{ bottom (getBottom s) top (getTop s) left (getLeft s) right (getRight s) })

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn runScene "" [next & [delay]]
  (.runScene cc/director
             (new cc/TransitionCrossFade (opt?? delay 0.6) next)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn isTransitioning? "" []
  (inst? cc/TransitionScene (.getRunningScene cc/director)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn csize "" [frame] (-> (createSprite frame)(.getContentSize)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn halfHW "" [s]
  (var sz (.getContentSize s))
  (cc/size (div2 sz.width) (div2 sz.height)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn bbox "" [s]
  (cc/rect (getLeft s) (getBottom s) (getWidth s) (getHeight s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn bbox4b4 "" [e]
  `{bottom (getLastBottom e)
    top (getLastTop e)
    left (getLastLeft e)
    right (getLastRight e) })

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getScaledHeight "" [s] (* (getHeight s) (.getScaleY s)))
(defn getHeight "" [s] (.-height (.getContentSize s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getScaledWidth "" [s] (* (getWidth s) (.getScaleX s)))
(defn getWidth "" [s] (.-width (.getContentSize s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getLeft "" [s] (- (.-x (.getPosition s)) (div2 (getWidth s))))
(defn getRight "" [s] (+ (.-x (.getPosition s)) (div2 (getWidth s))))
(defn getTop "" [s] (+ (.-y (.getPosition s)) (div2 (getHeight s))))
(defn getBottom "" [s] (- (.-y (.getPosition s)) (div2 (getHeight s))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getLastLeft "" [e]
  (if (def? e.lastPos)
    (- e.lastPos.x (div2 (getWidth e.sprite))) (getLeft e)))
(defn getLastRight "" [e]
  (if (def? e.lastPos)
    (+ e.lastPos.x (div2 (getWidth e.sprite))) (getRight e)))
(defn getLastTop "" [e]
  (if (def? e.lastPos)
    (+ e.lastPos.y (div2 (getHeight e.sprite))) (getTop e)))
(defn getLastBottom "" [e]
  (if (def? e.lastPos)
    (- e.lastPos.y (div2 (getHeight e.sprite))) (getBottom e)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn vcenterX "" [] (.-x (vcenter)))
(defn vcenterY "" [] (.-y (vcenter)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn vcenter "" []
  (var rc (vrect))
  (cc/p (+ rc.x (div2 rc.width))
        (+ rc.y (div2 rc.height))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn screenHeight "" [] (.-height (screenSize)))
(defn screenWidth "" [] (.-width (screenSize)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn vrect "" []
  (var vr (.getViewPortRect cc/view)
       vo (.getVisibleOrigin cc/view)
       wz (.getVisibleSize cc/view))
  (cc/rect vo.x vo.y wz.width wz.height))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn vbox "" []
  (var vr (.getViewPortRect cc/view)
       vo (.getVisibleOrigin cc/view)
       wz (.getVisibleSize cc/view))
  `{bottom vo.y
    left vo.x
    right (+ vo.x wz.width)
    top (+ vo.y wz.height) })

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn screenSize "" []
  (if cc.sys.isNative (.getFrameSize cc/view) (.getWinSize cc/director)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn screenCenter "" []
  (var sz (screenSize))
  (cc/p (div2 sz.width) (div2 sz.height)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn vboxMID "" [box]
  (cc/p (+ box.left (div2 (- box.right box.left)))
        (+ box.bottom (div2 (- box.top box.bottom)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn traceEnclosure "" [dt bbox rect vel]
  (var y (+ rect.y (* dt vel.y))
       x (+ rect.x (* dt vel.x))
       sz (div2 rect.height)
       sw (div2 rect.width)
       hit? #f
       vx vel.x
       vy vel.y)
  (cond (> (+ y sz) bbox.top) ;;hitting top wall
        `{x x y (- bbox.top sz) vx vx vy (- vy)}
        (< (- y sz) bbox.bottom) ;;hitting bottom wall
        `{x x y (+ bbox.bottom sz) vx vx vy (- vy)}
        (> (+ x sw) bbox.right) ;;hitting right wall
        `{x (- bbox.right sw) y y vx (- vx) vy vy}
        (< (- x sw) bbox.left) ;;hitting left wall
        `{x x y (+ bbox.left sw) vx (- vx) vy vy}))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getSprite "" [frame] (.getSpriteFrame cc/spriteFrameCache frame))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn hasKeyPad? "" []
  (and (not cc.sys.isNative)
       (true? (get cc.sys.capabilities :keyboard))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn hasMouse? "" []
  (and (not cc.sys.isNative)
       (true? (get cc.sys.capabilities :mouse))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn hasTouch? "" []
  (and (cc.sys.isNative)
       (true? (get cc.sys.capabilities :touches))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- onKeyXXX "" [target on off]
  (when (hasKeyPad?)
    (.addListener cc/eventManager
                  `{onKeyPressed #(on %1 %2)
                    onKeyReleased #(off %1 %2)
                    event cc.EventListener.KEYBOARD} target)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn onKeyPolls "" [target kb]
  (onKeyXXX target #(aset kb %1 #t) #(aset kb %1 #f)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn onKeyEvents "" [target bus]
  (onKeyXXX target
            #(.fire bus "key.down" `{group :key key %1 event %2})
            #(.fire bus "key.up" `{group :key key %1 event %2})))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn onMouseEvents "" [target bus]
  (when (hasMouse?)
    (.addListener
      cc/eventManager
      `{onMouseMove #(if (= (.getButton %1)
                            cc.EventMouse.BUTTON_LEFT)
                       (.fire bus
                              "mouse.move"
                              `{group :mouse
                                loc (.getLocation %1)
                                delta (.getDelta %1)
                                event %1}))
        onMouseDown #(.fire bus
                            "mouse.down"
                            `{group :mouse loc (.getLocation %1) event %1})
        onMouseUp #(.fire bus
                          "mouse.up"
                          `{group :mouse loc (.getLocation %1) event %1})
        event cc.EventListener.MOUSE} target)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn onTouchAll "" [target bus]
  (when (hasTouch?)
    (.addListener
      cc/eventManager
      `{event cc.EventListener.TOUCH_ALL_AT_ONCE
        prevTouchId -1
        onTouchesBegan #(true)
        onTouchesEnded #(.fire bus
                               "touch.all.end"
                               `{group :touch
                                 event %2
                                 loc (.getLocation (_1 %1))})
        onTouchesMoved (fn [ts e]
                         (var id (.-id (_1 %1)))
                         (if (not= id this.prevTouchId)
                           (set! this.prevTouchId id)
                           (.fire bud
                                  "touch.all.move"
                                  `{group :touch
                                    event e
                                    delta (.getDelta (_1 ts))}))) } target)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn onTouchOne "" [target bus]
  (when (hasTouch?)
    (.addListener
      cc/eventManager
      `{event cc.EventListener.TOUCH_ONE_BY_ONE
        swallowTouches true
        onTouchBegan #(true)
        onTouchMoved #(.fire bus
                             "touch.one.move"
                             `{group :touch
                               event %2
                               delta (.getDelta %1)
                               loc (.getLocation t)})
        onTouchEnded #(.fire bus
                             "touch.one.end"
                             `{group :touch
                               event %2
                               loc (.getLocation %1)}) } target)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const *anchors*
       `{Center (cc.p 0.5 0.5)
         Top (cc.p 0.5 1)
         TopRight (cc.p 1 1)
         Right (cc.p 1 0.5)
         BottomRight (cc.p 1 0)
         Bottom (cc.p 0.5 0)
         BottomLeft (cc.p 0 0)
         Left (cc.p 0 0.5)
         TopLeft (cc.p 0 1) })

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn resolveElastic "" [obj1 obj2]
  (var pos2 (.getPosition obj2.sprite)
       pos1 (.getPosition obj1.sprite)
       sz2 (.getContentSize obj2.sprite)
       sz1 (.getContentSize obj1.sprite)
       hh1 (div2 sz1.height)
       hw1 (div2 sz1.width)
       x pos1.x
       y pos1.y
       skip? #f
       bx2 (bbox4 obj2.sprite)
       bx1 (bbox4 obj1.sprite))
  (cond
    ;;coming from right
    (and (< bx1.left bx2.right)
         (< bx2.right bx1.right))
    (do (set! obj1.vel.x (Math/abs obj1.vel.x)
              obj2.vel.x (- (Math/abs obj2.vel.x))
              x (+ (getRight obj2.sprite) hw1))
        (.updatePosition obj1 x y))
    ;;coming from left
    (and (> bx1.right bx2.left)
         (< bx1.left bx2.left))
    (do (set! obj1.vel.x (- (Math/abs obj1.vel.x))
              obj2.vel.x (Math/abs obj2.vel.x)
              x (- (getLeft obj2.sprite) hw1))
        (.updatePosition obj1 x y))
    ;;coming from top
    (and (< bx1.bottom bx2.top)
         (> bx1.top bx2.top))
    (do (set! obj1.vel.y (Math/abs obj1.vel.y)
              obj2.vel.y (- (Math/abs obj2.vel.y))
              y (+ (getTop obj2.sprite) hh1))
        (.updatePosition obj1 x y))
    ;;coming from bottom
    (and (> bx1.top bx2.bottom)
         (> bx2.bottom bx1.bottom))
    (do (set! obj1.vel.y (- (Math/abs obj1.vel.y))
              obj2.vel.y (Math/abs obj2.vel.y)
              y (- (getBottom obj2.sprite) hh1))
        (.updatePosition obj1 x y))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn tmenu "" [items & [scale]]
  (var menu (new cc/Menu))
  (var~ mi obj)
  (for [i 0 sz (n# items)
        :while (< i sz) :recur (+1 i)]
    (set! obj (.@i items)
          mi (new cc/MenuItemLabel
                  (new cc/LabelBMFont obj.text obj.font) obj.selector obj.target))
    (.setOpacity mi (* 255 0.9))
    (.setScale mi (or scale 1))
    (.setTag mi (+1 i))
    (.addChild menu mi)) menu)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn tmenu1 "" [item]
  (var menu (tmenu item))
  (if item.anchor
    (.setAnchorPoint menu item.anchor))
  (if item.pos
    (.setPosition menu item.pos))
  (if-not item.visible
    (.setVisible menu false))
  (.alignItemsVertically menu) menu)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn vmenu "" [items & [options]]
  (var m (pmenu #t
                items
                (get options :scale)
                (get options :padding)))
  (if (def? (get options :x))
      (.setPosition m options.x options.y)) m)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn hmenu "" [items &[options]]
  (var m (pmenu #f
                items
                (get options :scale)
                (get options :padding)))
  (if (def? (get options x))
    (.setPosition m options.x options.y)) m)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn pmenu "" [vertical? items & [scale padding]]
  (var menu (new cc/Menu))
  (var~ obj mi)
  (for [i 0 sz (n# items)
        :while (< i sz) :recur (+1 i)]
    (set! obj (.@i items)
          mi (new cc/MenuItemSprite
                  (new cc/Sprite obj.nnn)
                  (new cc/Sprite (or obj.sss obj.nnn))
                  (new cc/Sprite (or obj.ddd obj.nnn))
                  obj.selector
                  obj.target))
    (if (def? obj.color) (.setColor mi obj.color))
    (if (number? scale) (.setScale mi scale))
    (.setTag mi (+1 i))
    (.addChild menu mi))
  (set! padding (opt?? padding 10))
  (if-not vertical?
    (.alignItemsHorizontallyWithPadding menu padding)
    (.alignItemsVerticallyWithPadding menu padding)) menu)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn pmenu1 "" [item]
  (var menu (pmenu #true [item]))
  (if item.anchor
    (.setAnchorPoint menu item.anchor))
  (if (def? item.x)
    (.setPosition menu item.x item.y))
  (if (false? item.visible)
    (.setVisible menu #f)) menu)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn bmfLabel "" [text font & [options]]
  (var f (new cc/LabelBMFont text font))
  (set! options (opt?? options `{}))
  (if (def? options.anchor) (.setAnchorPoint f options.anchor))
  (if (def? options.x) (.setPosition f options.x options.y))
  (if (def? options.color) (.setColor f options.color))
  (if (false? options.visible) (.setVisible f #f))
  (if (number? options.scale)
    (.setScale f options.scale))
  (.setOpacity f (* 0.9 255))
  f)


