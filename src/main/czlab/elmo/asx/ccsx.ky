
(ns czlab.elmo.core.ccsx)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn pointInBox? "" [box x y]
  (var [px py] (if-not (number? x) [x.x x.y] [x y]))
  (and (>= px box.left)
       (<= px box.right)
       (>= py box.bottom)
       (<= py box.top)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn collide? "" [a b]
  (cond
    (and (inst? cc/Sprite a)
         (inst? cc/Sprite b))
    (collide? (bbox a) (bbox b))
    (and (def? a.sprite)
         (def? b.sprite) a.sprite b.sprite)
    (collide? a.sprite b.sprite)
    (and a b)
    (cc/rectIntersectsRect a b)
    :else false))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setDesignResSize "" [landscape? w h pcy]
  (var [x y] (if landscape? [w h] [h w]))
  (do->nil (.setDesignResolutionSize cc/view x y pcy)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn isPortrait? "" [] (var s (screenSize)) (> s.height s.width))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn outOfBound? "" [e B]
  (if e (asx/outOfBound? (bbox4 e.sprite) (or B (vbox)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn undoTimer "" [par tm]
  (do->nil (if (and cc.sys.isNative tm) (.release tm))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createTimer "" [par tm]
  (var rc (.runAction par (new cc.DelayTime tm)))
  (if cc.sys.isNative (.retain rc)) rc)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn timerDone? "" [t] (if t (.isDone t)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createSpriteFrame "" [frame] (new cc/Sprite frame))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn bbox4 "" [s]
  `{ bottom (getBottom s) top (getTop s) left (getLeft s) right (getRight s) })

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn runScene "" [next & [delay]]
  (set! delay (opt?? delay 0.6))
  (.runScene cc/director (new cc/TransitionCrossFade delay next)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn isTransitioning? "" []
  (inst? cc/TransitionScene (.getRunningScene cc/director)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn csize "" [frame] (-> (createSprite frame)(.getContentSize)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn halfHW "" [s]
  (var sz (.getContentSize s))
  [(* 0.5 sz.width) (* 0.5 sz.height)])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn bbox "" [s]
  (cc/rect (getLeft s) (getBottom s) (getWidth s) (getHeight s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn bbox4b4 "" [e]
  `{bottom (getLastBottom e)
    top (getLastTop e)
    left (getLastLeft e)
    right (getLastRight e) })

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getScaledHeight "" [s] (* (getHeight s) (.getScaleY s)))
(defn getHeight "" [s] (.-height (.getContentSize s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getScaledWidth "" [s] (* (getWidth s) (.getScaleX s)))
(defn getWidth "" [s] (.-width (.getContentSize s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getLeft "" [s] (- (.-x (.getPosition s)) (* 0.5 (getWidth s))))
(defn getRight "" [s] (+ (.-x (.getPosition s)) (* 0.5 (getWidth s))))
(defn getTop "" [s] (+ (.-y (.getPosition s)) (* 0.5 (getHeight s))))
(defn getBottom "" [s] (- (.-y (.getPosition s)) (* 0.5 (getHeight s))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getLastLeft "" [e]
  (if (def? e.lastPos)
    (- e.lastPos.x (* 0.5 (getWidth e.sprite))) (getLeft e)))
(defn getLastRight "" [e]
  (if (def? e.lastPos)
    (+ e.lastPos.x (* 0.5 (getWidth e.sprite))) (getRight e)))
(defn getLastTop "" [e]
  (if (def? e.lastPos)
    (+ e.lastPos.y (* 0.5 (getHeight e.sprite))) (getTop e)))
(defn getLastBottom "" [e]
  (if (def? e.lastPos)
    (- e.lastPos.y (* 0.5 (getHeight e.sprite))) (getBottom e)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn centerX "" [] (.-x (center)))
(defn centerY "" [] (.-y (center)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn center "" []
  (var rc (vrect))
  (cc/p (+ rc.x (* 0.5 rc.width))
        (+ rc.y (* 0.5 rc.height))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn screenHeight "" [] (.-height (screenSize)))
(defn screenWidth "" [] (.-width (screenSize)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn vrect "" []
  (var vr (.getViewPortRect cc/view)
       vo (.getVisibleOrigin cc/view)
       wz (.getVisibleSize cc/view))
  (cc/rect vo.x vo.y wz.width wz.height))

  /**
   * Get the visible screen box.
   * @method
   * @return {Object} rectangle box.
   */
  vbox() {
    const vr= cc.view.getViewPortRect(),
    vo = cc.view.getVisibleOrigin(),
    wz= cc.view.getVisibleSize();
    return {
      bottom: vo.y,
      left: vo.x,
      right: vo.x + wz.width,
      top: vo.y + wz.height
    };
  },

  /**
   * Get the actual window/frame size.
   * @method
   * @return {cc.Size}
   */
  screen() {
    return cc.sys.isNative ? cc.view.getFrameSize()
                           : cc.director.getWinSize();
  },

  /**
   * Get the actual screen center.
   * @method
   * @return {cc.Point}
   */
  scenter() {
    const sz = this.screen();
    return cc.p(sz.width * 0.5, sz.height * 0.5);
  },

  /**
   * Get the center of this box.
   * @method
   * @param {Object} box
   * @return {cc.Point}
   */
  vboxMID(box) {
    return cc.p(box.left + (box.right-box.left) * 0.5,
                box.bottom + (box.top-box.bottom) * 0.5);
  },

  /**
   * Test if this box is hitting boundaries.
   * rect.x & y are center positioned.
   *
   * If hit, the new position and velocities
   * are returned.
   * @method
   * @param {Number} dt  delta time
   * @param {Object} bbox
   * @param {Oject} rect
   * @param {Object} vel velocity for [x,y]
   * @return {Object}
   */
  traceEnclosure(dt,bbox,rect,vel) {
    let sz= rect.height * 0.5,
    sw= rect.width * 0.5,
    vx= vel.x,
    vy= vel.y,
    y = rect.y + dt * vel.y,
    x = rect.x + dt * vel.x,
    hit=false;

    if (y + sz > bbox.top) {
      //hitting top wall
      y = bbox.top - sz;
      vy = - vy;
      hit=true;
    }
    else
    if (y - sz < bbox.bottom) {
      //hitting bottom wall
      y = bbox.bottom + sz;
      vy = - vy;
      hit=true;
    }

    if (x + sw > bbox.right) {
      //hitting right wall
      x = bbox.right - sw;
      vx = - vx;
      hit=true;
    }
    else
    if (x - sw < bbox.left) {
      //hitting left wall
      x = bbox.left + sw;
      vx = - vx;
      hit=true;
    }

    return hit ? {
        hit: true,
        x: x,
        y: y,
        vx: vx,
        vy: vy
      } : {
        hit: false,
        x: x,
        y: y
      };
  },

  /**
   * Get the sprite from the frame cache using
   * its id (e.g. #ship).
   * @method getSprite
   * @param {String} frameid
   * @return {cc.Sprite}
   */
  getSprite(frameid) {
    return cc.spriteFrameCache.getSpriteFrame(frameid);
  },

  /**
   * @method hasKeyPad
   * @return {Boolean}
   */
  hasKeyPad() {
    return !!cc.sys.capabilities['keyboard'] && !cc.sys.isNative;
  },

  /**
   * @method onKeyPolls
   */
  onKeyPolls(kb) {
    if (!this.hasKeyPad()) {return;}
    cc.eventManager.addListener({
      onKeyPressed(key, e) {
        kb[key]=true;
      },
      onKeyReleased(key, e) {
        kb[key]=false;
      },
      event: cc.EventListener.KEYBOARD
    }, sh.main);
  },

  /**
   * @method onKeys
   */
  onKeys(bus) {
    if (!this.hasKeyPad()) {return;}
    cc.eventManager.addListener({
      onKeyPressed(key, e) {
        bus.fire('/key/down', {group: 'key', key: key, event: e});
      },
      onKeyReleased(key, e) {
        bus.fire('/key/up', {group: 'key', key: key, event: e});
      },
      event: cc.EventListener.KEYBOARD
    }, sh.main);
  },

  /**
   * @method hasMouse
   * @return {Boolean}
   */
  hasMouse() {
    return !!cc.sys.capabilities['mouse'];
  },

  onMouse(bus) {
    if (!this.hasMouse()) {return;}
    cc.eventManager.addListener({
      onMouseMove(e) {
        if (e.getButton() === cc.EventMouse.BUTTON_LEFT) {
          bus.fire('/mouse/move', {group:'mouse',
                   loc: e.getLocation(),
                   delta: e.getDelta(),
                   event: e});
        }
      },
      onMouseDown(e) {
        bus.fire('/mouse/down', {group:'mouse',
                 loc: e.getLocation(),
                 event: e});
      },
      onMouseUp(e) {
        bus.fire('/mouse/up', {group:'mouse',
                 loc: e.getLocation(),
                 event: e});
      },
      event: cc.EventListener.MOUSE
    }, sh.main);
  },

  /**
   * @method hasTouch
   * @return {Boolean}
   */
  hasTouch() {
    return !!cc.sys.capabilities['touches'];
  },

  onTouchAll(bus) {
    if (!this.hasTouch()) {return;}
    cc.eventManager.addListener({
      event: cc.EventListener.TOUCH_ALL_AT_ONCE,
      prevTouchId: -1,
      onTouchesBegan(ts,e) { return true; },
      onTouchesEnded(ts,e) {
        bus.fire('/touch/all/end', {group:'touch',
                   event: e,
                   loc: ts[0].getLocation()});
      },
      onTouchesMoved(ts,e) {
        const id = ts[0].id;
        if (this.prevTouchId != id) {
          this.prevTouchId = id;
        } else {
          bus.fire('/touch/all/move', {group:'touch',
                   event: e,
                   delta: ts[0].getDelta()});
        }
      }
    }, sh.main);
  },

  onTouchOne(bus) {
    if (!this.hasTouch()) {return;}
    cc.eventManager.addListener({
      event: cc.EventListener.TOUCH_ONE_BY_ONE,
      swallowTouches: true,
      onTouchBegan(t,e) { return true; },
      onTouchMoved(t,e) {
        bus.fire('/touch/one/move', {group:'touch',
                 event: e,
                 delta: t.getDelta(),
                 loc: t.getLocation()});
      },
      onTouchEnded(t,e) {
        bus.fire('/touch/one/end', {group:'touch',
                 event: e,
                 loc: t.getLocation()});
      }
    }, sh.main);
  },

  /**
   * @property {Object} acs Anchor Points
   */
  acs : {
    Center: cc.p(0.5, 0.5),
    Top: cc.p(0.5, 1),
    TopRight: cc.p(1, 1),
    Right: cc.p(1, 0.5),
    BottomRight: cc.p(1, 0),
    Bottom: cc.p(0.5, 0),
    BottomLeft: cc.p(0, 0),
    Left: cc.p(0, 0.5),
    TopLeft: cc.p(0, 1)
  },

  /**
   * not used for now.
   * @private
   */
  resolveElastic(obj1,obj2) {
    let pos2 = obj2.sprite.getPosition(),
    pos1= obj1.sprite.getPosition(),
    sz2= obj2.sprite.getContentSize(),
    sz1= obj1.sprite.getContentSize(),
    hh1= sz1.height * 0.5,
    hw1= sz1.width * 0.5,
    x = pos1.x,
    y= pos1.y,
    bx2 = this.bbox4(obj2.sprite),
    bx1 = this.bbox4(obj1.sprite);

    // coming from right
    if (bx1.left < bx2.right && bx2.right < bx1.right) {
      obj1.vel.x = Math.abs(obj1.vel.x);
      obj2.vel.x = - Math.abs(obj2.vel.x);
      x= this.getRight(obj2.sprite) + hw1;
    }
    else
    // coming from left
    if (bx1.right > bx2.left && bx1.left < bx2.left) {
      obj1.vel.x = - Math.abs(obj1.vel.x);
      obj2.vel.x = Math.abs(obj2.vel.x);
      x= this.getLeft(obj2.sprite) - hw1;
    }
    else
    // coming from top
    if (bx1.bottom < bx2.top && bx1.top > bx2.top) {
      obj1.vel.y = Math.abs(obj1.vel.y);
      obj2.vel.y = - Math.abs(obj2.vel.y);
      y= this.getTop(obj2.sprite) + hh1;
    }
    else
    // coming from bottom
    if (bx1.top > bx2.bottom && bx2.bottom > bx1.bottom) {
      obj1.vel.y = - Math.abs(obj1.vel.y);
      obj2.vel.y = Math.abs(obj2.vel.y);
      y= this.getBottom(obj2.sprite) - hh1;
    }
    else {
      return;
    }
    obj1.updatePosition(x,y);
  },

  /**
   * Create a text menu containing this set of items.
   *
   * Each item has the form {:text
   * :fontPath
   * :cb
   * :target}
   * @method
   * @param {Array} items
   * @param {Number} scale
   * @return {cc.Menu}
   */
  tmenu(items,scale) {
    let menu= new cc.Menu(),
    mi,
    t=0,
    obj;

    for (let n=0; n < items.length; ++n) {
      obj= items[n];
      mi= new cc.MenuItemLabel(new cc.LabelBMFont(obj.text,
                                                  obj.fontPath),
                               obj.selector || obj.cb,
                               obj.target);
      mi.setOpacity(255 * 0.9);
      mi.setScale(scale || 1);
      mi.setTag(++t);
    }
    return menu;
  },

  /**
   * Make a text label menu containing one single button.
   * @method
   * @param {Object} options
   * @return {cc.Menu}
   */
  tmenu1(options) {
    let menu = this.tmenu(options);
    if (options.anchor) { menu.setAnchorPoint(options.anchor); }
    if (options.pos) { menu.setPosition(options.pos); }
    if (options.visible === false) { menu.setVisible(false); }
    menu.alignItemsVertically();
    return menu;
  },

  /**
   * Create a vertically aligned menu with graphic buttons.
   * @method
   * @param {Array} items
   * @param {Object} options
   * @return {cc.Menu}
   */
  vmenu(items, options) {
    const hint=options || {},
    m= this.pmenu(true,
                  items,
                  hint.scale,
                  hint.padding);
    if (!!hint.pos) {
      m.setPosition(hint.pos);
    }
    return m;
  },

  /**
   * Create a horizontally aligned menu with graphic buttons.
   * @method
   * @param {Array} items
   * @param {Object} options
   * @return {cc.Menu}
   */
  hmenu(items, options) {
    const hint= options || {},
    m= this.pmenu(false,
                  items,
                  hint.scale,
                  hint.padding);
    if (!!hint.pos) {
      m.setPosition(hint.pos);
    }
    return m;
  },

  /**
   * Create a menu with graphic buttons.
   * @method
   * @param {Boolean} vertical
   * @param {Array} items
   * @param {Number} scale
   * @param {Number} padding
   * @return {cc.Menu}
   */
  pmenu(vertical, items, scale, padding) {
    let menu = new cc.Menu(),
    obj,
    mi,
    t=0;

    for (let n=0; n < items.length; ++n) {
      obj=items[n];
      mi= new cc.MenuItemSprite(new cc.Sprite(obj.nnn),
                                new cc.Sprite(obj.sss || obj.nnn),
                                new cc.Sprite(obj.ddd || obj.nnn),
                                obj.selector || obj.cb,
                                obj.target);
      if (!!obj.color) { mi.setColor(obj.color); }
      if (!!scale) { mi.setScale(scale); }
      mi.setTag(++t);
      menu.addChild(mi);
    }

    padding = padding || 10;
    if (!vertical) {
      menu.alignItemsHorizontallyWithPadding(padding);
    } else {
      menu.alignItemsVerticallyWithPadding(padding);
    }

    return menu;
  },

  /**
   * Create a single button menu.
   * @method
   * @param {Object} options
   * @return {cc.Menu}
   */
  pmenu1(options) {
    const menu = this.pmenu(true, [options]);
    if (options.anchor) { menu.setAnchorPoint(options.anchor); }
    if (options.pos) { menu.setPosition(options.pos); }
    if (options.visible === false) { menu.setVisible(false); }
    return menu;
  },

  /**
   * Create a Label.
   * @method
   * @param {Object} options
   * @return {cc.LabelBMFont}
   */
  bmfLabel(options) {
    let f= new cc.LabelBMFont(options.text, options.fontPath);
    if (options.color) { f.setColor(options.color); }
    if (options.pos) { f.setPosition(options.pos); }
    if (options.anchor) { f.setAnchorPoint(options.anchor); }
    if (options.visible === false) { f.setVisible(false); }
    f.setScale( options.scale || 1);
    f.setOpacity(0.9*255);
    return f;
  }

};

sjs.merge(exports, xbox);
/*@@
return xbox;
@@*/

//////////////////////////////////////////////////////////////////////////////
//EOF

