/*Auto generated by Kirby v1.0.0 - Wed Feb 14 2018 22:51:14 GMT-0800 (PST)
  czlab.elmo.core.scenes
{"doc" "" "author" "Kenneth Leung"}
*/

const K = require("kirby");
const opt_QMRK__QMRK = K["opt_QMRK__QMRK"];
const kirbystdlibref = require("kirby");
const __module_namespace__ = "czlab.elmo.core.scenes";
defcz(XLive, cc.Sprite, ctor, function(x, y, png) {
  let GS__3 = Array.prototype.slice.call(arguments, 3);
  let options = kirbystdlibref.getIndex(GS__3, 0);
  this._super();
  s.initWithSpriteFrameName(png);
  if (options) {
    if (( (typeof (options.scale) === "number") )) {
      this.setScale(options.scale);
    }
  }
  return this.setPosition(x, y);
});
defcz(XHUDLives, cc.Class, reduce, function(x) {
  for (let n = 0, ____break = false; ((!____break) && (n < x)); n = (n + 1)) {
    this.hud.removeIcon(kirbystdlibref.getProp(pop_BANG(this.icons), 0));
  }
  return (this.curLives -= x);
}, isDead_QMRK, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return (!((this.curLives > 0)));
}, getLives, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return this.curLives;
}, reset, function() {
  let x = this.hud;
  this.icons.forEach(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return x.removeIcon(____args[0]);
  });
  return (this.curLives = this.totalLives, this.icons = []);
}, resurrect, function() {
  this.reset();
  return this.drawLives();
}, drawLives, function() {
  let y = (this.topLeft.y - div2(this.lifeSize.height));
  let x = (this.topLeft.x + div2(this.lifeSize.width));
  let gap = 2;
  let v = null;
  return (function() {
    for (let n = 0, ____break = false; ((!____break) && (n < this.curLives)); n = (n + 1)) {
      (
      v = new XLive(x, y, {}));
      this.hud.addIcon(v);
      conj_BANG(this.icons, v);
      if ( (this.dir > 0) ) {
        (
        x += (this.lifeSize.width + gap));
      } else {
        (
        x -= (this.lifeSize.width - gap));
      }
    }
  }).call(this);
}, create, function() {
  let dummy = new XLive(0, 0, {});
  (this.lifeSize = cc.size(cx.getScaledWidth(dummy), cx.getScaledHeight(dummy)));
  return this.drawLives();
}, ctor, function(hud, x, y) {
  let GS__4 = Array.prototype.slice.call(arguments, 3);
  let options = kirbystdlibref.getIndex(GS__4, 0);
  this._super();
  (this["topLeft"] = cc.p(x, y), this["icons"] = [], this["dir"] = 1, this["hud"] = hud, this["curLives"] = -1);
  this.reset();
  return (options ?
    (function() {
      return (((typeof (options.dir) === "number")) ?
        (this.dir = options.dir) :
        null);
    }).call(this) :
    null);
});
defcz(XLayer, cc.Layer, rtti, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return ["layer-", nextInt()].join("");
}, regoAtlas, function(name) {
  let GS__5 = Array.prototype.slice.call(arguments, 1);
  let zx = kirbystdlibref.getIndex(GS__5, 0);
  let tag = kirbystdlibref.getIndex(GS__5, 1);
  let a = new cc.SpriteBatchNode(cc.textureCache.addImage(_STAR_cfg_STAR.getSheet(name)));
  (options = opt_QMRK__QMRK(options, (new Map([]))));
  this.addChild(a, (((typeof (options.zix) !== "undefined")) ?
    options.zix :
    this.lastZix), (((typeof (options.tag) !== "undefined")) ?
    options.tag :
    ++this.lastTag));
  return a;
}, setup, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return null;
}, pkInput, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return null;
}, addAudioIcon, function(on, off) {
  let GS__6 = Array.prototype.slice.call(arguments, 2);
  let options = kirbystdlibref.getIndex(GS__6, 0);
  let no = new cc.MenuItemSprite(new cc.Sprite(off.nnn), new cc.Sprite((off.sss || off.nnn)), new cc.Sprite((off.ddd || off.nnn)));
  let ya = new cc.MenuItemSprite(new cc.Sprite(on.nnn), new cc.Sprite((on.sss || on.nnn)), new cc.Sprite((on.ddd || on.nnn)));
  let wb = cx.vbox();
  (options = opt_QMRK__QMRK(options, {}));
  if (( (typeof (options.color) !== "undefined") )) {
    ya.setColor(options.color);
    no.setColor(options.color);
  }
  if (( (typeof (options.scale) !== "undefined") )) {
    no.setScale(options.scale);
    ya.setScale(options.scale);
  }
  (audio = new cc.MenuItemToggle(ya, no, function() {
    let ____args = Array.prototype.slice.call(arguments);
    return cx.toggle(((____args[0].getSelectedIndex() === 0)));
  }));
  if (( (typeof (options.anchor) !== "undefined") )) {
    audio.setAnchorPoint(options.anchor);
  }
  audio.setSelectedIndex((get_DASH_in(_STAR_cfg_STAR, ["sound", "open"]) ?
    0 :
    1));
  (
  menu = new cc.Menu(audio));
  if (( (typeof (options.x) !== "undefined") )) {
    menu.setPosition(options.x, options.y);
  }
  return this.addItem(menu);
}, onQuit, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return null;
}, centerImage, function(frame) {
  let GS__7 = Array.prototype.slice.call(arguments, 1);
  let parent = kirbystdlibref.getIndex(GS__7, 0);
  let bg = new cc.Sprite(frame);
  let cw = cx.vcenter();
  bg.setPosition(cw);
  return (parent ?
    this.addAtlasItem(parent, bg) :
    this.addItem(bg));
}, getBatchNode, function(sheet) {
  return this.getChildByName(sheet);
}, removeBatchAll, function(sheet) {
  return (function() {
    let GS__8 = this.getChildByName(sheet);
    let b = GS__8;
    return ((((typeof (GS__8) === "undefined")) || ((GS__8 === null))) ?
      null :
      b.removeAllChildren(true));
  }).call(this);
}, removeItem, function(n) {
  return n.removeFromParent(true);
}, removeAll, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return this.removeAllChildren(true);
}, addItem, function(n, parent) {
  let GS__9 = Array.prototype.slice.call(arguments, 2);
  let zx = kirbystdlibref.getIndex(GS__9, 0);
  let tag = kirbystdlibref.getIndex(GS__9, 1);
  if ( ((parent instanceof cc.SpriteBatchNode) && (n instanceof cc.Sprite)) ) {
    n.setBatchNode(parent);
  }
  return (parent || this).addChild(n, (((typeof (zx) !== "undefined")) ?
    zx :
    this.lastZix), (((typeof (tag) !== "undefined")) ?
    tag :
    ++this.lastTag));
}, incIndexZ, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return ++this.lastZix;
}, setParentScene, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return (this.ptScene = ____args[0]);
}, scene, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return this.ptScene;
}, init, function() {
  this._super();
  return this.setup();
}, ctor, function() {
  this._super();
  return (this["lastTag"] = 0, this["lastZix"] = 0);
});
defcz(XMenuLayer, XLayer, rtti, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return "XMenuLayer";
}, mkBackQuit, function(vert, btns, posfn) {
  let menu = (vert_QMRK ?
    cx.vmenu(btns) :
    cx.hmenu(btns));
  let sz = kirbystdlibref.getProp(menu.getChildren(), 0).getContentSize();
  if (posfn) {
    posfn(menu, sz);
  }
  return this.addItem(menu);
}, mkAudio, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return this.addAudioIcon(____args[0], ____args[1], ____args[2]);
});
defcz(XGameHUDLayer, XLayer, rtti, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return "HUD";
}, removeIcon, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return this.removeItem(____args[0]);
}, addIcon, function(icon) {
  let GS__10 = Array.prototype.slice.call(arguments, 1);
  let zx = kirbystdlibref.getIndex(GS__10, 0);
  let idx = kirbystdlibref.getIndex(GS__10, 1);
  return this.addItem(this.hud(), icon, zx, idx);
}, hud, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return this.atlasId;
}, setup, function() {
  (this["scoreLabel"] = null, this["lives"] = null, this["score"] = 0, this["replayBtn"] = null);
  this.initAtlases();
  this.initIcons();
  this.initLabels();
  return this.initCtrlBtns();
}, initAtlases, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return null;
}, initIcons, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return null;
}, initLabels, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return null;
}, initCtrlBtns, function() {
  let opts = this.options.replay;
  if (opts) {
    this.addReplayIcon(cx.pmenu1(opts), opts.where);
  }
  (opts = this.options.i_menu);
  return (opts ?
    this.addMenuIcon(cx.pmenu1(opts), opts.where) :
    null);
}, getScore, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return this.score;
}, resetAsNew, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return this.reset();
}, reset, function() {
  this.disableReplay();
  (
  this.score = 0);
  return (this.lives ?
    this.lives.resurrect() :
    null);
}, reduceLives, function(x) {
  this.lives.reduce(x);
  return this.lives.isDead_QMRK();
}, updateScore, function(n) {
  (
  this.score += n);
  return this.scoreLabel.setString(Number(this.score).toString());
}, disableReplay, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return this.replayBtn.setVisible(false);
}, enableReplay, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return this.replayBtn.setVisible(true);
}, addMenuIcon, function(menu, where) {
  let c = menu.getChildByTag(1);
  let hh = div2(cx.getScaledHeight(c));
  let hw = div2(cx.getScaledWidth(c));
  let wz = cx.vbox();
  let y = ((where === _STAR_anchorr_STAR.Bottom) ?
    (wz.bottom + csts.TILE + hh) :
    (wz.top - csts.TILE - hh));
  menu.setPosition((wz.right - csts.TILE - hw), y);
  return this.addItem(menu);
}, addReplayIcon, function(menu, where) {
  let c = menu.getChildByTag(1);
  let hh = div2(cx.getScaledHeight(c));
  let hw = div2(cx.getScaledWidth(c));
  let wz = cx.vbox();
  let y = ((where === _STAR_anchors_STAR.Bottom) ?
    (wz.bottom + csts.TILE + hh) :
    (wz.top - csts.TILE - hh));
  menu.setPosition((wz.left + csts.TILE + hw), y);
  (
  this.replayBtn = menu);
  return this.addItem(menu);
});
defcz(XGameLayer, XLayer, pkInput, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return null;
}, getLCfg, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return get_DASH_in(_STAR_cfg_STAR, ["levels", this.level]);
}, signal, function(topic, cb) {
  return this.ebus.on(topic, cb);
}, keyPoll, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return kirbystdlibref.getProp(this.keys, ____args[0]);
}, initEngine, function(syss, fact) {
  (
  this.engine = new ecs.Engine());
  if (( (typeof (fact) === "function") )) {
    fact(this.engine, this.options);
  }
  return syss.forEach(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return this.engine.addSystem(____args[0]);
  });
}, getEnclosureBox, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return cx.vbox;
}, setGameMode, function(mode) {
  return update_DASH_in_BANG(_STAR_cfg_STAR, ["csts", "GAME-MODE"], function() {
    let ____args = Array.prototype.slice.call(arguments);
    return mode;
  });
}, newGame, function(mode) {
  cx.stopAudio();
  this.onNewGame(mode);
  return this.scheduleUpdate();
}, setup, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return this.newGame;
}, operational, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return true;
}, getBackgd, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return kirbystdlibref.getProp(this.ptScene.getLayers(), "BackLayer");
}, getHUD, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return kirbystdlibref.getProp(this.ptScene.getLayers(), "HUD");
}, update, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return (this.operational() ?
    this.engine.update(____args[0]) :
    null);
}, keys, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return this.keyboard;
}, rtti, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return "GameLayer";
}, ctor, function(options) {
  this._super();
  return (this["ebus"] = new Ebus(), this["keyboard"] = K.fillArray(256, false), this["players="] = K.fillArray(3, null), this["level"] = 1, this["actor"] = null);
});
defcz(XScene, cc.Scene, getLayers, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return this.layers;
}, init, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return (this._super() ?
    (function() {
      let GS__11 = true;
      this.createLayers();
      return GS__11;
    }).call(this) :
    null);
}, createLayers, function() {
  let a = (this.lays || []);
  let glptr,
    rc,
    obj;
  (this.lays || []).forEach(function(p) {
    (
    obj = new p(this.options));
    if ( (obj instanceof XGameLayer) ) {
      (
      glptr = obj);
    } else {
      if ( (obj instanceof XLayer) ) {
        obj.init();
      }
    }
    if ( (obj instanceof XLayer) ) {
      obj.setParentScene(this);
    }
    (this.layers[obj.rtti()] = obj);
    return this.addChild(obj);
  });
  return (glptr ?
    glptr.init() :
    null);
}, onmsg, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return (function() {
    this.ebus.on(____args[0], ____args[1]);
    return this;
  }).call(this);
}, ctor, function(ls, options) {
  this._super();
  return (this["lays"] = (ls || []), this["layers"] = {}, this["ebus"] = new Ebus());
});
defcz(XSceneFactory, cc.Class, create, function(options) {
  let itemKey = "layers";
  let scene = null;
  let cfg = null;
  let arr = this.layers;
  (options = (options || {}), cfg = options);
  if ( (contains_QMRK(options, itemKey) && (Array.isArray(options.layers))) ) {
    (arr = options.layers, cfg = K.dissoc(options, itemKey));
  }
  (scene = new XScene(arr, cfg));
  scene.init();
  return scene;
}, ctor, function(ls) {
  this._super();
  return (this.layers = (ls || []));
});
////////////////////////////////////////////////////////////////////////////////
//fn: [showMenu] in file: scenes.ky, line: 367
const showMenu = function() {
  return cc.director.pushScene(sh.ptypes.mmenu.create({
    onback: function() {
      let ____args = Array.prototype.slice.call(arguments);
      return cc.director.popScene();
    }
  }));
};
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.elmo.core.scenes",
    macros: {}
  },
  showMenu: showMenu
};