
(defcz XLive cc/Sprite
  ctor (fn [x y png & [options]]
         (._super this)
         (s.initWithSpriteFrameName png)
         (when options
           (if (number? options.scale)
             (.setScale this options.scale)))
         (.setPosition this x y)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcz XHUDLives cc/Class
  reduce (fn [x]
           (for [n 0 :while (< n x) :recur (+1 n)]
             (.removeIcon @@hud (_1 (pop! @@icons))))
           (-= @@curLives x))

  isDead? #(not (pos? @@curLives))

  getLives #(@@curLives)

  reset (fn []
          (var x @@hud)
          (each #(.removeIcon x %1) @@icons)
          (set! @@curLives @@totalLives @@icons []))

  resurrect (fn [] (.reset this) (.drawLives this))

  drawLives
  (fn []
    (var y (- @@topLeft.y (div2 @@lifeSize.height))
         x (+ @@topLeft.x (div2 @@lifeSize.width)) gap 2 v nil)
    (for [n 0 :while (< n @@curLives) :recur (+1 n)]
      (set! v (new XLive x y `{}))
      (.addIcon @@hud v)
      (conj! @@icons v)
      (if (> @@dir 0)
        (+= x (+ @@lifeSize.width gap))
        (-= x (- @@lifeSize.width gap)))))

  create
  (fn []
    (var dummy (new XLive 0 0 `{}))
    (set! @@lifeSize (cc/size (cx/getScaledWidth dummy)
                              (cx/getScaledHeight dummy)))
    (.drawLives this))

  ctor
  (fn [hud x y & [options]]
    (._super this)
    (assign! this
             :topLeft (cc/p x y)
             :icons []
             :dir 1
             :hud hud
             :curLives -1)
    (.reset this)
    (when options
      (if (number? options.dir)
        (set! @@dir options.dir)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcz XLayer cc/Layer
  rtti #(str "layer-" (nextInt))
  regoAtlas
  (fn [name & [zx tag]]
    (var a (new cc/SpriteBatchNode
                (.addImage cc/textureCache (.getSheet *cfg* name))))
    (set! options (opt?? options {}))
    (.addChild this
               a
               (if (def? options.zix) options.zix @@lastZix)
               (if (def? options.tag) options.tag (++ @@lastTag))) a)

  setup #()
  pkInput #()

  addAudioIcon
  (fn [on off &[options]]
    (var no (new cc/MenuItemSprite
                 (new cc/Sprite off.nnn)
                 (new cc/Sprite (or off.sss off.nnn))
                 (new cc/Sprite (or off.ddd off.nnn)))
         ya (new cc/MenuItemSprite
                 (new cc/Sprite on.nnn)
                 (new cc/Sprite (or on.sss on.nnn))
                 (new cc/Sprite (or on.ddd on.nnn)))
         wb (cx/vbox))
    (set! options (opt?? options `{}))
    (when (def? options.color)
      (.setColor ya options.color)
      (.setColor no options.color))
    (when (def? options.scale)
      (.setScale no options.scale)
      (.setScale ya options.scale))
    (set! audio
          (new cc/MenuItemToggle
               ya
               no
               #(cx/toggle (zero? (.getSelectedIndex %1)))))
    (if (def? options.anchor)
      (.setAnchorPoint audio options.anchor))
    (.setSelectedIndex audio (if (get-in *cfg* [:sound :open]) 0 1))
    (set! menu (new cc/Menu audio))
    (if (def? options.x)
      (.setPosition menu options.x options.y))
    (.addItem this menu))

  onQuit #()

  centerImage
  (fn [frame & [parent]]
    (var bg (new cc/Sprite frame)
         cw  (cx/vcenter))
    (.setPosition bg cw)
    (if parent
      (.addAtlasItem this parent  bg)
      (.addItem this bg)))

  getBatchNode
  (fn [sheet] (.getChildByName this sheet))

  removeBatchAll
  (fn [sheet]
    (if-some [b (.getChildByName this sheet)] (.removeAllChildren b true)))

  removeItem
  (fn [n] (.removeFromParent n true))

  removeAll
  #(.removeAllChildren this true)

  addItem
  (fn [n parent & [zx tag]]
    if (! sjs.echt(pzx)) {
      pzx = this.lastZix;
    }
    if (! sjs.echt(ptag)) {
      ptag = ++this.lastTag;
    }
    (if (and (inst? cc/SpriteBatchNode parent)
             (inst? cc/Sprite n))
      (.setBatchNode n parent))
    (.addChild (or parent this)
               n
               (if (def? zx ) zx @@lastZix)
               (if (def? tag) tag (++ @@lastTag))))

  incIndexZ #(++ @@lastZix)

  setParentScene #(set! @@ptScene %1)

  scene #(@@ptScene)

  init (fn [] (._super this) (.setup this))

  ctor
  (fn []
    (._super this)
    (assign! this :lastTag 0 :lastZix 0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcz XMenuLayer XLayer
  rtti #("XMenuLayer")
  mkBackQuit
  (fn [vert btns posfn]
    (var menu (if vert? (cx/vmenu btns) (cx/hmenu btns))
         sz (-> (_1 (.getChildren menu)) (.getContentSize)))
    (if posfn (posfn menu sz))
    (.addItem this menu))

  mkAudio #(.addAudioIcon this %1 %2 %3))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcz XGameHUDLayer XLayer
  rtti #( "HUD")
  removeIcon #(.removeItem this %1)
  addIcon
  (fn [icon & [zx idx]]
    (.addItem this (.hud this) icon zx idx))
  hud #(@@atlasId)
  setup
  (fn []
    (assign! this
             :scoreLabel nil
             :lives nil
             :score 0
             :replayBtn nil)
    (.initAtlases this)
    (.initIcons this)
    (.initLabels this)
    (.initCtrlBtns this))

  initAtlases #()
  initIcons #()
  initLabels #()
  initCtrlBtns
  (fn []
    (var opts this.options.replay)
    (if opts
      (.addReplayIcon this (cx/pmenu1 opts) opts.where))
    (set! opts this.options.i_menu)
    (if opts
      (.addMenuIcon this (cx/pmenu1 opts) opts.where)))

  getScore #(@@score)
  resetAsNew #(.reset this)
  reset
  (fn []
    (.disableReplay this)
    (set! @@score 0)
    (if @@lives
      (.resurrect @@lives)))

  reduceLives
  (fn [x]
    (.reduce @@lives x)
    (.isDead? @@lives))

  updateScore
  (fn [n]
    (+= @@score n)
    (.setString @@scoreLabel (numStr @@score)))

  disableReplay #(.setVisible @@replayBtn #f)
  enableReplay #(.setVisible @@replayBtn #t)

  addMenuIcon
  (fn [menu where]
    (var c (.getChildByTag menu 1)
         hh (div2 (cx/getScaledHeight c))
         hw (div2 (cx/getScaledWidth c))
         wz (cx/vbox)
         y (if (= where *anchorr*.Bottom)
             (+ wz.bottom  csts.TILE hh)
             (- wz.top csts.TILE hh)))
    (.setPosition menu (- wz.right csts.TILE hw) y)
    (.addItem this menu))

  addReplayIcon
  (fn [menu where]
    (var c (.getChildByTag menu 1)
         hh (div2 (cx/getScaledHeight c))
         hw (div2 (cx/getScaledWidth c))
         wz (cx/vbox)
         y (if (= where *anchors*.Bottom)
             (+ wz.bottom  csts.TILE  hh)
             (- wz.top csts.TILE hh)))
    (.setPosition menu (+ wz.left csts.TILE hw) y)
    (set! @@replayBtn menu)
    (.addItem this menu)))

//////////////////////////////////////////////////////////////////////////////
/**
 * @extends XLayer
 * @class XGameLayer
 */
const XGameLayer = XLayer.extend({
  /**
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method pkInput
   * @protected
   */
  pkInput() {
    //ccsx.onKeyPolls(this.keyboard);
    //ccsx.onTouchOne(this.ebus);
    //ccsx.onMouse(this.ebus);
  },
  /**
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method getLCfg
   * @return {Object}
   */
  getLCfg() {
    return sh.getLevelCfg(this.level);
  },
  /**
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method signal
   * @protected
   * @param {String} topic
   * @param {Function} cb
   */
  signal(topic, cb) {
    this.ebus.on(topic,cb);
  },

  /**
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method keyPoll
   * @protected
   * @param {Number} key
   */
  keyPoll(key){
    return this.keyboard[key];
  },
  /**
   * @method initEngine
   * @protected
   */
  initEngine(syss, fact) {
    this.engine = this.newFlow();
    if (sjs.isfunc(fact)) {
      fact(this.engine, this.options);
    }
    R.forEach( z => {
      this.engine.addSystem(new (z)(this.options), z.Priority);
    }, R.filter( x => {
      return sjs.isfunc(x);
    }, syss));
  },
  /**
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method getEnclosureBox
   * @return {Object} rect box.
   */
  getEnclosureBox() {
    return ccsx.vbox();
    /*
    var csts = xcfg.csts,
    wz = ccsx.vrect();
    return { top: wz.height - csts.TILE,
             left: csts.TILE,
             bottom: csts.TILE,
             right: wz.width - csts.TILE };
     * */
  },

  /**
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method setGameMode
   * @param {Number} mode
   */
  setGameMode(mode) {
    xcfg.csts.GAME_MODE=mode;
  },

  /**
   * Reset and create new Ash Engine.
   *
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method newFlow
   */
  newFlow() {
    return this.engine= new Ash.Engine();
  },

  /**
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method newGame
   * @param {Number} mode
   */
  newGame(mode) {
    if (xcfg.sound.open) {
      cc.audioEngine.stopAllEffects();
      cc.audioEngine.stopMusic();
    }
    this.onNewGame(mode);
    this.scheduleUpdate();
  },

  /**
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method setup
   * @protected
   */
  setup() {
    const m= this.options.mode;
    if (m === sh.gtypes.ONLINE_GAME ||
        m === sh.gtypes.P2_GAME ||
        m === sh.gtypes.P1_GAME) {
      this.newGame(m);
    }
  },

  /**
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method operational
   * @return {Boolean}
   */
  operational() { return true; },

  /**
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method getBackgd
   * @return {cc.Layer} - background layer
   */
  getBackgd() {
    const rc= this.ptScene.getLayers();
    return rc['BackLayer'];
  },

  /**
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method getHUD
   * @return {cc.Layer}  the HUD layer
   */
  getHUD() {
    const rc= this.ptScene.getLayers();
    return rc['HUD'];
  },

  /**
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method update
   */
  update(dt) {
    if (this.operational()  && !!this.engine) {
      this.engine.update(dt);
    }
  },

  /**
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method keys
   * @return {Array}  keys
   */
  keys() { return this.keyboard; },

  /**
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method rtti
   * @return {String}  id
   */
  rtti() { return 'GameLayer'; },

  /**
   * @memberof module:zotohlab/asx/scenes~XGameLayer
   * @method ctor
   * @param {Object} options
   */
  ctor(options) {
    this.ebus= ebus.reify();
    this._super(options);
    this.keyboard= [];
    this.players= [];
    this.level= 1;
    this.actor= null;
    sh.main = this;
    const vbox= ccsx.vbox();
    sjs.loggr.debug('cc.view: vbox: left: ' + vbox.left +
                    ', bottom: ' + vbox.bottom +
                    ', top: ' + vbox.top +
                    ', right: ' + vbox.right);
  }

});

//////////////////////////////////////////////////////////////////////////////
/**
 * @extends cc.Scene
 * @class XScene
 */
const XScene = cc.Scene.extend({

  /**
   * @memberof module:zotohlab/asx/scenes~XScene
   * @method getLayers
   * @return {Array}
   */
  getLayers() {
    return this.layers;
  },

  /**
   * @memberof module:zotohlab/asx/scenes~XScene
   * @method init
   */
  init() {
    if (this._super()) {
      this.createLayers();
      return true;
    } else {
      return false;
    }
  },

  /**
   * @memberof module:zotohlab/asx/scenes~XScene
   * @method createLayers
   */
  createLayers() {
    let a = this.lays || [],
    glptr = undef,
    rc,
    obj;
    //hold off init'ing game layer, leave that as last
    rc = R.any((proto) => {
      obj= new (proto)(this.options);
      if ( obj instanceof XGameLayer ) {
        glptr = obj;
      }
      else
      if (obj instanceof XLayer) {
        obj.init();
      }

      if (obj instanceof XLayer) {
        obj.setParentScene(this);
      }

      this.layers[ obj.rtti() ] = obj;
      this.addChild(obj);
      return false;
    }, a);

    if (a.length > 0 && rc===false ) {
      if (!!glptr) {
        glptr.init();
      }
    }
  },

  /**
   * @memberof module:zotohlab/asx/scenes~XScene
   * @method onmsg
   * @chainable
   * @param {String} topic
   * @param {Function} cb
   * @return {cc.Scene}
   */
  onmsg(topic, cb) {
    this.ebus.on(topic, cb);
    return this;
  },

  /**
   * @memberof module:zotohlab/asx/scenes~XScene
   * @method ctor
   * @param {Array} ls - list of layers
   * @param {Object} options
   */
  ctor(ls, options) {
    this.options = options || {};
    this._super();
    this.lays= ls || [];
    this.layers= {};
    this.ebus= ebus.reify();
  }

});

//////////////////////////////////////////////////////////////////////////////
/**
 * @class XSceneFactory
 */
class XSceneFactory extends sjs.ES6Claxx {

  /**
   * @memberof module:zotohlab/asx/scenes~XSceneFactory
   * @method reify
   * @param {Object} options
   * @return {cc.Scene}
   */
  reify(options) {
    let itemKey= 'layers',
    arr= this.layers,
    cfg;
    if (options && sjs.hasKey(options, itemKey ) &&
        sjs.isarr(options.layers)) {
      arr= options.layers;
      cfg= R.omit(itemKey, options);
    } else {
      cfg= options || {};
    }
    const scene = new XScene(arr, cfg);
    scene.init()
    return scene;
  }

  /**
   * @memberof module:zotohlab/asx/scenes~XSceneFactory
   * @method constructor
   * @param {Array} list of layers
   */
  constructor(ls) {
    super();
    this.layers= ls || [];
  }

}

/** @alias module:zotohlab/asx/scenes */
const xbox= /** @lends xbox# */{
  /**
   * @property {XMenuLayer} XMenuLayer
   */
  XMenuLayer: XMenuLayer,
  /**
   * @property {XGameHUDLayer} XGameHUDLayer
   */
  XGameHUDLayer: XGameHUDLayer,
  /**
   * @property {XGameLayer} XGameLayer
   */
  XGameLayer: XGameLayer,
  /**
   * @property {XLayer} XLayer
   */
  XLayer: XLayer,
  /**
   * @property {XLive} XLive
   */
  XLive: XLive,
  /**
   * @property {XHUDLives} XHUDLives
   */
  XHUDLives: XHUDLives,

  /**
   * @property {XSceneFactory} XSceneFactory
   */
  XSceneFactory: XSceneFactory,
  /**
   * @property {XScene} XScene
   */
  XScene: XScene,
  /**
   * @method showMenu
   */
  showMenu() {
    const dir= cc.director;
    dir.pushScene(sh.protos[sh.ptypes.mmenu].reify({
      onback() { dir.popScene(); }
    }));
  }
};

sjs.merge(exports, xbox);
/*@@
return xbox;
@@*/

//////////////////////////////////////////////////////////////////////////////
//EOF

