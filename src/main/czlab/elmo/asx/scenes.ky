
(ns ^{:doc ""
      :author "Kenneth Leung"}

  czlab.elmo.core.scenes

  (:require ["kirby" :as K :refer [opt??]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcz XLive cc/Sprite
  ctor (fn [x y png & [options]]
         (._super this)
         (s.initWithSpriteFrameName png)
         (when options
           (if (number? options.scale)
             (.setScale this options.scale)))
         (.setPosition this x y)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcz XHUDLives cc/Class
  reduce (fn [x]
           (for [n 0 :while (< n x) :recur (+1 n)]
             (.removeIcon @@hud (_1 (pop! @@icons))))
           (-= @@curLives x))

  isDead? #(not (pos? @@curLives))

  getLives #(@@curLives)

  reset (fn []
          (var x @@hud)
          (each #(.removeIcon x %1) @@icons)
          (set! @@curLives @@totalLives @@icons []))

  resurrect (fn [] (.reset this) (.drawLives this))

  drawLives
  (fn []
    (var y (- @@topLeft.y (div2 @@lifeSize.height))
         x (+ @@topLeft.x (div2 @@lifeSize.width)) gap 2 v nil)
    (for [n 0 :while (< n @@curLives) :recur (+1 n)]
      (set! v (new XLive x y `{}))
      (.addIcon @@hud v)
      (conj! @@icons v)
      (if (> @@dir 0)
        (+= x (+ @@lifeSize.width gap))
        (-= x (- @@lifeSize.width gap)))))

  create
  (fn []
    (var dummy (new XLive 0 0 `{}))
    (set! @@lifeSize (cc/size (cx/getScaledWidth dummy)
                              (cx/getScaledHeight dummy)))
    (.drawLives this))

  ctor
  (fn [hud x y & [options]]
    (._super this)
    (assign! this
             :topLeft (cc/p x y)
             :icons []
             :dir 1
             :hud hud
             :curLives -1)
    (.reset this)
    (when options
      (if (number? options.dir)
        (set! @@dir options.dir)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcz XLayer cc/Layer
  rtti #(str "layer-" (nextInt))
  regoAtlas
  (fn [name & [zx tag]]
    (var a (new cc/SpriteBatchNode
                (.addImage cc/textureCache (.getSheet *cfg* name))))
    (set! options (opt?? options {}))
    (.addChild this
               a
               (if (def? options.zix) options.zix @@lastZix)
               (if (def? options.tag) options.tag (++ @@lastTag))) a)

  setup #()
  pkInput #()

  addAudioIcon
  (fn [on off &[options]]
    (var no (new cc/MenuItemSprite
                 (new cc/Sprite off.nnn)
                 (new cc/Sprite (or off.sss off.nnn))
                 (new cc/Sprite (or off.ddd off.nnn)))
         ya (new cc/MenuItemSprite
                 (new cc/Sprite on.nnn)
                 (new cc/Sprite (or on.sss on.nnn))
                 (new cc/Sprite (or on.ddd on.nnn)))
         wb (cx/vbox))
    (set! options (opt?? options `{}))
    (when (def? options.color)
      (.setColor ya options.color)
      (.setColor no options.color))
    (when (def? options.scale)
      (.setScale no options.scale)
      (.setScale ya options.scale))
    (set! audio
          (new cc/MenuItemToggle
               ya
               no
               #(cx/toggle (zero? (.getSelectedIndex %1)))))
    (if (def? options.anchor)
      (.setAnchorPoint audio options.anchor))
    (.setSelectedIndex audio (if (get-in *cfg* [:sound :open]) 0 1))
    (set! menu (new cc/Menu audio))
    (if (def? options.x)
      (.setPosition menu options.x options.y))
    (.addItem this menu))

  onQuit #()

  centerImage
  (fn [frame & [parent]]
    (var bg (new cc/Sprite frame)
         cw  (cx/vcenter))
    (.setPosition bg cw)
    (if parent
      (.addAtlasItem this parent  bg)
      (.addItem this bg)))

  getBatchNode
  (fn [sheet] (.getChildByName this sheet))

  removeBatchAll
  (fn [sheet]
    (if-some [b (.getChildByName this sheet)] (.removeAllChildren b true)))

  removeItem
  (fn [n] (.removeFromParent n true))

  removeAll
  #(.removeAllChildren this true)

  addItem
  (fn [n parent & [zx tag]]
    (if (and (inst? cc/SpriteBatchNode parent)
             (inst? cc/Sprite n))
      (.setBatchNode n parent))
    (.addChild (or parent this)
               n
               (if (def? zx ) zx @@lastZix)
               (if (def? tag) tag (++ @@lastTag))))

  incIndexZ #(++ @@lastZix)

  setParentScene #(set! @@ptScene %1)

  scene #(@@ptScene)

  init (fn [] (._super this) (.setup this))

  ctor
  (fn []
    (._super this)
    (assign! this :lastTag 0 :lastZix 0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcz XMenuLayer XLayer
  rtti #("XMenuLayer")
  mkBackQuit
  (fn [vert btns posfn]
    (var menu (if vert? (cx/vmenu btns) (cx/hmenu btns))
         sz (-> (_1 (.getChildren menu)) (.getContentSize)))
    (if posfn (posfn menu sz))
    (.addItem this menu))

  mkAudio #(.addAudioIcon this %1 %2 %3))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcz XGameHUDLayer XLayer
  rtti #( "HUD")
  removeIcon #(.removeItem this %1)
  addIcon
  (fn [icon & [zx idx]]
    (.addItem this (.hud this) icon zx idx))
  hud #(@@atlasId)
  setup
  (fn []
    (assign! this
             :scoreLabel nil
             :lives nil
             :score 0
             :replayBtn nil)
    (.initAtlases this)
    (.initIcons this)
    (.initLabels this)
    (.initCtrlBtns this))

  initAtlases #()
  initIcons #()
  initLabels #()
  initCtrlBtns
  (fn []
    (var opts this.options.replay)
    (if opts
      (.addReplayIcon this (cx/pmenu1 opts) opts.where))
    (set! opts this.options.i_menu)
    (if opts
      (.addMenuIcon this (cx/pmenu1 opts) opts.where)))

  getScore #(@@score)
  resetAsNew #(.reset this)
  reset
  (fn []
    (.disableReplay this)
    (set! @@score 0)
    (if @@lives
      (.resurrect @@lives)))

  reduceLives
  (fn [x]
    (.reduce @@lives x)
    (.isDead? @@lives))

  updateScore
  (fn [n]
    (+= @@score n)
    (.setString @@scoreLabel (numStr @@score)))

  disableReplay #(.setVisible @@replayBtn #f)
  enableReplay #(.setVisible @@replayBtn #t)

  addMenuIcon
  (fn [menu where]
    (var c (.getChildByTag menu 1)
         hh (div2 (cx/getScaledHeight c))
         hw (div2 (cx/getScaledWidth c))
         wz (cx/vbox)
         y (if (= where *anchorr*.Bottom)
             (+ wz.bottom  csts.TILE hh)
             (- wz.top csts.TILE hh)))
    (.setPosition menu (- wz.right csts.TILE hw) y)
    (.addItem this menu))

  addReplayIcon
  (fn [menu where]
    (var c (.getChildByTag menu 1)
         hh (div2 (cx/getScaledHeight c))
         hw (div2 (cx/getScaledWidth c))
         wz (cx/vbox)
         y (if (= where *anchors*.Bottom)
             (+ wz.bottom  csts.TILE  hh)
             (- wz.top csts.TILE hh)))
    (.setPosition menu (+ wz.left csts.TILE hw) y)
    (set! @@replayBtn menu)
    (.addItem this menu)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcz XGameLayer XLayer
  pkInput #()

  getLCfg #(get-in *cfg* [:levels @@level])

  signal (fn [topic cb] (.on @@ebus topic cb))

  keyPoll #(nth @@keys %1)

  initEngine
  (fn [syss fact]
    (set! @@engine (new ecs/Engine))
    (if (fn? fact)
      (fact @@engine @@options))
    (each #(.addSystem @@engine %1) syss))

  getEnclosureBox #(cx/vbox)

  setGameMode
  (fn [mode]
    (update-in! *cfg*
                [:csts :GAME-MODE] #(mode)))

  newGame
  (fn [mode]
    (cx/stopAudio)
    (@@onNewGame mode)
    (@@scheduleUpdate))

  setup #(@@newGame )

  operational #(true)

  getBackgd #(get (.getLayers @@ptScene) :BackLayer)

  getHUD #(get (.getLayers @@ptScene) :HUD)

  update #(if (@@operational)
            (.update @@engine %1))

  keys #(@@keyboard)

  rtti #("GameLayer")

  ctor
  (fn [options]
    (._super this)
    (assign! this
             :ebus (new Ebus)
             :keyboard (K/fillArray 256 #f)
             :players= (K/fillArray 3 nil)
             :level 1
             :actor nil)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcz XScene cc/Scene
  getLayers #(@@layers)
  init #(if (._super this)
          (do->true (@@createLayers)))
  createLayers
  (fn []
    (var a (or @@lays []))
    (var~ glptr rc obj)
    ;;hold off init'ing game layer, leave that as last
    (each
      (fn [p]
        (set! obj (new p this.options))
        (if (inst? XGameLayer obj)
          (set! glptr obj)
          (if (inst? XLayer obj) (.init obj)))
        (if (inst? XLayer obj)
          (.setParentScene obj this))
        (assign! @@layers (.rtti obj) obj)
        (@@addChild obj))
      (or @@lays []))
    (if glptr (.init glptr)))

  onmsg #(do->this (.on @@ebus %1 %2))

  ctor
  (fn [ls options]
    (._super this)
    (assign! this
             :lays (or ls [])
             :layers `{}
             :ebus (new Ebus))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcz XSceneFactory cc/Class
  create
  (fn [options]
    (var itemKey :layers
         scene nil
         cfg nil
         arr @@layers)
    (set! options (or options `{})
          cfg options)
    (when (and (contains? options itemKey)
               (array? options.layers))
      (set! arr options.layers
            cfg (K/dissoc options itemKey)))
    (set! scene (new XScene arr cfg))
    (.init scene)
    scene)

  ctor
  (fn [ls]
    (._super this)
    (set! @@layers (or ls []))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn showMenu "" []
  (.pushScene cc/director
              (.create
                sh.ptypes.mmenu
                `{ onback #(.popScene cc/director) })))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;EOF

