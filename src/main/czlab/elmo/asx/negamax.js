/*Auto generated by Kirby v1.0.0 - Tue Feb 13 2018 16:38:28 GMT-0800 (PST)
  czlab.elmo.core.negamax
{"doc" "" "author" "Kenneth Leung"}
*/

const K = require("kirby");
const opt_QMRK__QMRK = K["opt_QMRK__QMRK"];
const kirbystdlibref = require("kirby");
const __module_namespace__ = "czlab.elmo.core.negamax";
const _STAR_pinf_STAR = 1000000;
////////////////////////////////////////////////////////////////////////////////
//fn: [negamax*] in file: negamax.ky, line: 11
const negamax_STAR = function(board, game, maxDepth, depth, alpha, beta) {
  let openMoves = board.getNextMoves(game);
  let bestValue = (-1 * _STAR_pinf_STAR);
  let bestMove = kirbystdlibref.getProp(openMoves, 0);
  let rc,
    move;
  if ( (depth === maxDepth) ) {
    (
    game.lastBestMove = kirbystdlibref.getProp(openMoves, 0));
  }
  for (let n = 0, sz = kirbystdlibref.count(openMoves), ____break = false; ((!____break) && (n < sz)); n = (n + 1)) {
    (
    move = openMoves[n]);
    board.makeMove(game, move);
    board.switchPlayer(game);
    (
    rc = (-1 * negamax(board, game, maxDepth, (depth - 1), (-1 * beta), (-1 * alpha))));
    board.switchPlayer(game);
    board.unmakeMove(game, move);
    (
    bestValue = Math.max(bestValue, rc));
    if ( (alpha < rc) ) {
      (alpha = rc, bestMove = move);
      if ( (depth === maxDepth) ) {
        (
        game.lastBestMove = move);
      }
      if ( (alpha >= beta) ) {
        (
        ____break = true);
      }
    }
  }
  return bestValue;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [negamax] in file: negamax.ky, line: 38
const negamax = function(board, game, maxDepth, depth, alpha, beta) {
  return ((((depth === 0)) || board.isOver(game)) ?
    board.evalScore(game) :
    negamax_STAR(board, game, maxDepth, depth, alpha, beta));
};
defcz(GameBoard, cc.Class, isOver, function(game) {
  return false;
}, evalScore, function(game) {
  return 0;
}, getNextMoves, function(game) {
  return [];
}, makeMove, function(game, move) {}, switchPlayer, function(game) {}, takeSnapshot, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return null;
}, unmakeMove, function(game, move) {});
defcz(NegaMax, cc.Class, getGameBoard, function() {
  let ____args = Array.prototype.slice.call(arguments);
  return this.board;
}, ctor, function(board) {
  this._super();
  return (this.board = board);
}, eval, function() {
  let snapshot = this.board.takeSnapshot();
  negamax(this.board, snapshot, 10, 10, (-1 * _STAR_pinf_STAR), _STAR_pin_STAR);
  return snapshot.lastBestMove;
});
defcz(Snapshot, cc.Class, ctor, function() {
  this._super();
  return (this["lastBestMove"] = null, this["other"] = null, this["cur"] = null, this["state"] = null);
});
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.elmo.core.negamax",
    macros: {}
  },
  negamax: negamax
};