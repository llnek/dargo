/*Auto generated by Kirby v1.0.0 - Tue Feb 13 2018 01:39:39 GMT-0800 (PST)
  czlab.elmo.core.ccsx
{"doc" "" "author" "Kenneth Leung"}
*/

const K = require("kirby");
const opt_QMRK__QMRK = K["opt_QMRK__QMRK"];
const kirbystdlibref = require("kirby");
const __module_namespace__ = "czlab.elmo.core.ccsx";
////////////////////////////////////////////////////////////////////////////////
//fn: [pointInBox?] in file: ccsx.ky, line: 11
const pointInBox_QMRK = function(box, x) {
  let GS__3 = Array.prototype.slice.call(arguments, 2);
  let y = kirbystdlibref.getIndex(GS__3, 0);
  let GS__4 = ((!((typeof (x) === "number"))) ?
    [x.x, x.y] :
    [x, y]);
  let px = kirbystdlibref.getIndex(GS__4, 0);
  let py = kirbystdlibref.getIndex(GS__4, 1);
  return ((px >= box.left) && (px <= box.right) && (py >= box.bottom) && (py <= box.top));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [collide?] in file: ccsx.ky, line: 19
const collide_QMRK = function(a, b) {
  return (((a instanceof cc.Sprite) && (b instanceof cc.Sprite)) ?
    collide_QMRK(bbox(a), bbox(b)) :
    ((a && b && ((typeof (a.sprite) !== "undefined")) && ((typeof (b.sprite) !== "undefined")) && a.sprite && b.sprite) ?
      collide_QMRK(a.sprite, b.sprite) :
      ((a && b) ?
        cc.rectIntersectsRect(a, b) :
        (true ?
          false :
          null))));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [setDesignResSize] in file: ccsx.ky, line: 33
const setDesignResSize = function(landscape_QMRK, w, h, pcy) {
  let GS__5 = (landscape_QMRK ?
    [w, h] :
    [h, w]);
  let x = kirbystdlibref.getIndex(GS__5, 0);
  let y = kirbystdlibref.getIndex(GS__5, 1);
  return (function() {
    let GS__6 = null;
    cc.view.setDesignResolutionSize(x, y, pcy);
    return GS__6;
  }).call(this);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [isPortrait?] in file: ccsx.ky, line: 38
const isPortrait_QMRK = function() {
  let s = screenSize();
  return (s.height > s.width);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [outOfBound?] in file: ccsx.ky, line: 41
const outOfBound_QMRK = function(e, B) {
  return (e ?
    asx.outOfBound_QMRK(bbox4(e.sprite), (B || vbox())) :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [undoTimer] in file: ccsx.ky, line: 45
const undoTimer = function(par, tm) {
  return (function() {
    let GS__7 = null;
    if ( (cc.sys.isNative && tm) ) {
      tm.release();
    }
    return GS__7;
  }).call(this);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [createTimer] in file: ccsx.ky, line: 49
const createTimer = function(par, tm) {
  let rc = par.runAction(new cc.DelayTime(tm));
  if (cc.sys.isNative) {
    rc.retain();
  }
  return rc;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [timerDone?] in file: ccsx.ky, line: 55
const timerDone_QMRK = function(t) {
  return (t ?
    t.isDone() :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [createSpriteFrame] in file: ccsx.ky, line: 58
const createSpriteFrame = function(frame) {
  return new cc.Sprite(frame);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [bbox4] in file: ccsx.ky, line: 61
const bbox4 = function(s) {
  return {
    bottom: getBottom(s),
    top: getTop(s),
    left: getLeft(s),
    right: getRight(s)
  };
};
////////////////////////////////////////////////////////////////////////////////
//fn: [runScene] in file: ccsx.ky, line: 65
const runScene = function(next) {
  let GS__8 = Array.prototype.slice.call(arguments, 1);
  let delay = kirbystdlibref.getIndex(GS__8, 0);
  return cc.director.runScene(new cc.TransitionCrossFade(opt_QMRK__QMRK(delay, 0.6), next));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [isTransitioning?] in file: ccsx.ky, line: 70
const isTransitioning_QMRK = function() {
  return (cc.director.getRunningScene() instanceof cc.TransitionScene);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [csize] in file: ccsx.ky, line: 74
const csize = function(frame) {
  return createSprite(frame).getContentSize();
};
////////////////////////////////////////////////////////////////////////////////
//fn: [halfHW] in file: ccsx.ky, line: 77
const halfHW = function(s) {
  let sz = s.getContentSize();
  return cc.size((0.5 * sz.width), (0.5 * sz.height));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [bbox] in file: ccsx.ky, line: 82
const bbox = function(s) {
  return cc.rect(getLeft(s), getBottom(s), getWidth(s), getHeight(s));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [bbox4b4] in file: ccsx.ky, line: 86
const bbox4b4 = function(e) {
  return {
    bottom: getLastBottom(e),
    top: getLastTop(e),
    left: getLastLeft(e),
    right: getLastRight(e)
  };
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getScaledHeight] in file: ccsx.ky, line: 93
const getScaledHeight = function(s) {
  return (getHeight(s) * s.getScaleY());
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getHeight] in file: ccsx.ky, line: 94
const getHeight = function(s) {
  return s.getContentSize().height;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getScaledWidth] in file: ccsx.ky, line: 97
const getScaledWidth = function(s) {
  return (getWidth(s) * s.getScaleX());
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getWidth] in file: ccsx.ky, line: 98
const getWidth = function(s) {
  return s.getContentSize().width;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getLeft] in file: ccsx.ky, line: 101
const getLeft = function(s) {
  return (s.getPosition().x - (0.5 * getWidth(s)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getRight] in file: ccsx.ky, line: 102
const getRight = function(s) {
  return (s.getPosition().x + (0.5 * getWidth(s)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getTop] in file: ccsx.ky, line: 103
const getTop = function(s) {
  return (s.getPosition().y + (0.5 * getHeight(s)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getBottom] in file: ccsx.ky, line: 104
const getBottom = function(s) {
  return (s.getPosition().y - (0.5 * getHeight(s)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getLastLeft] in file: ccsx.ky, line: 107
const getLastLeft = function(e) {
  return (((typeof (e.lastPos) !== "undefined")) ?
    (e.lastPos.x - (0.5 * getWidth(e.sprite))) :
    getLeft(e));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getLastRight] in file: ccsx.ky, line: 110
const getLastRight = function(e) {
  return (((typeof (e.lastPos) !== "undefined")) ?
    (e.lastPos.x + (0.5 * getWidth(e.sprite))) :
    getRight(e));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getLastTop] in file: ccsx.ky, line: 113
const getLastTop = function(e) {
  return (((typeof (e.lastPos) !== "undefined")) ?
    (e.lastPos.y + (0.5 * getHeight(e.sprite))) :
    getTop(e));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getLastBottom] in file: ccsx.ky, line: 116
const getLastBottom = function(e) {
  return (((typeof (e.lastPos) !== "undefined")) ?
    (e.lastPos.y - (0.5 * getHeight(e.sprite))) :
    getBottom(e));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [vcenterX] in file: ccsx.ky, line: 121
const vcenterX = function() {
  return vcenter().x;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [vcenterY] in file: ccsx.ky, line: 122
const vcenterY = function() {
  return vcenter().y;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [vcenter] in file: ccsx.ky, line: 125
const vcenter = function() {
  let rc = vrect();
  return cc.p((rc.x + (0.5 * rc.width)), (rc.y + (0.5 * rc.height)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [screenHeight] in file: ccsx.ky, line: 131
const screenHeight = function() {
  return screenSize().height;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [screenWidth] in file: ccsx.ky, line: 132
const screenWidth = function() {
  return screenSize().width;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [vrect] in file: ccsx.ky, line: 135
const vrect = function() {
  let vr = cc.view.getViewPortRect();
  let vo = cc.view.getVisibleOrigin();
  let wz = cc.view.getVisibleSize();
  return cc.rect(vo.x, vo.y, wz.width, wz.height);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [vbox] in file: ccsx.ky, line: 142
const vbox = function() {
  let vr = cc.view.getViewPortRect();
  let vo = cc.view.getVisibleOrigin();
  let wz = cc.view.getVisibleSize();
  return {
    bottom: vo.y,
    left: vo.x,
    right: (vo.x + wz.width),
    top: (vo.y + wz.height)
  };
};
////////////////////////////////////////////////////////////////////////////////
//fn: [screenSize] in file: ccsx.ky, line: 152
const screenSize = function() {
  return (cc.sys.isNative ?
    cc.view.getFrameSize() :
    cc.director.getWinSize());
};
////////////////////////////////////////////////////////////////////////////////
//fn: [screenCenter] in file: ccsx.ky, line: 156
const screenCenter = function() {
  let sz = screenSize();
  return cc.p((0.5 * sz.width), (0.5 * sz.height));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [vboxMID] in file: ccsx.ky, line: 161
const vboxMID = function(box) {
  return cc.p((box.left + (0.5 * (box.right - box.left))), (box.bottom + (0.5 * (box.top - box.bottom))));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [traceEnclosure] in file: ccsx.ky, line: 166
const traceEnclosure = function(dt, bbox, rect, vel) {
  let y = (rect.y + (dt * vel.y));
  let x = (rect.x + (dt * vel.x));
  let sz = (0.5 * rect.height);
  let sw = (0.5 * rect.width);
  let vx = vel.x;
  let vy = vel.y;
  return (((y + sz) > bbox.top) ?
    {
      x: x,
      y: (bbox.top - sz),
      vx: vx,
      vy: (-1 * vy)
    } :
    (((y - sz) < bbox.bottom) ?
      {
        x: x,
        y: (bbox.bottom + sz),
        vx: vx,
        vy: (-1 * vy)
      } :
      (((x + sw) > bbox.right) ?
        {
          x: (bbox.right - sw),
          y: y,
          vx: (-1 * vx),
          vy: vy
        } :
        (((x - sw) < bbox.left) ?
          {
            x: x,
            y: (bbox.left + sw),
            vx: (-1 * vx),
            vy: vy
          } :
          null))));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getSprite] in file: ccsx.ky, line: 183
const getSprite = function(frame) {
  return cc.spriteFrameCache.getSpriteFrame(frame);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [hasKeyPad?] in file: ccsx.ky, line: 186
const hasKeyPad_QMRK = function() {
  return ((!cc.sys.isNative) && ((kirbystdlibref.getProp(cc.sys.capabilities, "keyboard") === true)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [hasMouse?] in file: ccsx.ky, line: 191
const hasMouse_QMRK = function() {
  return ((!cc.sys.isNative) && ((kirbystdlibref.getProp(cc.sys.capabilities, "mouse") === true)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [hasTouch?] in file: ccsx.ky, line: 196
const hasTouch_QMRK = function() {
  return (cc.sys.isNative() && ((kirbystdlibref.getProp(cc.sys.capabilities, "touches") === true)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [onKeyXXX] in file: ccsx.ky, line: 201
const onKeyXXX = function(target, on, off) {
  return (hasKeyPad_QMRK() ?
    (function() {
      return cc.eventManager.addListener({
        onKeyPressed: function() {
          let ____args = Array.prototype.slice.call(arguments);
          return on(____args[0], ____args[1]);
        },
        onKeyReleased: function() {
          let ____args = Array.prototype.slice.call(arguments);
          return off(____args[0], ____args[1]);
        },
        event: cc.EventListener.KEYBOARD
      }, target);
    }).call(this) :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [onKeyPolls] in file: ccsx.ky, line: 209
const onKeyPolls = function(target, kb) {
  return onKeyXXX(target, function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (kb[____args[0]] = true);
  }, function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (kb[____args[0]] = false);
  });
};
////////////////////////////////////////////////////////////////////////////////
//fn: [onKeyEvents] in file: ccsx.ky, line: 213
const onKeyEvents = function(target, bus) {
  return onKeyXXX(target, function() {
    let ____args = Array.prototype.slice.call(arguments);
    return bus.fire("key.down", {
      group: "key",
      key: ____args[0],
      event: ____args[1]
    });
  }, function() {
    let ____args = Array.prototype.slice.call(arguments);
    return bus.fire("key.up", {
      group: "key",
      key: ____args[0],
      event: ____args[1]
    });
  });
};
////////////////////////////////////////////////////////////////////////////////
//fn: [onMouseEvents] in file: ccsx.ky, line: 219
const onMouseEvents = function(target, bus) {
  return (hasMouse_QMRK() ?
    (function() {
      return cc.eventManager.addListener({
        onMouseMove: function() {
          let ____args = Array.prototype.slice.call(arguments);
          return ((____args[0].getButton() === cc.EventMouse.BUTTON_LEFT) ?
            bus.fire("mouse.move", {
              group: "mouse",
              loc: ____args[0].getLocation(),
              delta: ____args[0].getDelta(),
              event: ____args[0]
            }) :
            null);
        },
        onMouseDown: function() {
          let ____args = Array.prototype.slice.call(arguments);
          return bus.fire("mouse.down", {
            group: "mouse",
            loc: ____args[0].getLocation(),
            event: ____args[0]
          });
        },
        onMouseUp: function() {
          let ____args = Array.prototype.slice.call(arguments);
          return bus.fire("mouse.up", {
            group: "mouse",
            loc: ____args[0].getLocation(),
            event: ____args[0]
          });
        },
        event: cc.EventListener.MOUSE
      }, target);
    }).call(this) :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [onTouchAll] in file: ccsx.ky, line: 240
const onTouchAll = function(target, bus) {
  return (hasTouch_QMRK() ?
    (function() {
      return cc.eventManager.addListener({
        event: cc.EventListener.TOUCH_ALL_AT_ONCE,
        prevTouchId: -1,
        onTouchesBegan: function() {
          let ____args = Array.prototype.slice.call(arguments);
          return true;
        },
        onTouchesEnded: function() {
          let ____args = Array.prototype.slice.call(arguments);
          return bus.fire("touch.all.end", {
            group: "touch",
            event: ____args[1],
            loc: kirbystdlibref.getProp(____args[0], 0).getLocation()
          });
        },
        onTouchesMoved: function(ts, e) {
          let id = kirbystdlibref.getProp(____args[0], 0).id;
          return ((id !== this.prevTouchId) ?
            (this.prevTouchId = id) :
            bud.fire("touch.all.move", {
              group: "touch",
              event: e,
              delta: kirbystdlibref.getProp(ts, 0).getDelta()
            }));
        }
      }, target);
    }).call(this) :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [onTouchOne] in file: ccsx.ky, line: 263
const onTouchOne = function(target, bus) {
  return (hasTouch_QMRK() ?
    (function() {
      return cc.eventManager.addListener({
        event: cc.EventListener.TOUCH_ONE_BY_ONE,
        swallowTouches: true,
        onTouchBegan: function() {
          let ____args = Array.prototype.slice.call(arguments);
          return true;
        },
        onTouchMoved: function() {
          let ____args = Array.prototype.slice.call(arguments);
          return bus.fire("touch.one.move", {
            group: "touch",
            event: ____args[1],
            delta: ____args[0].getDelta(),
            loc: t.getLocation()
          });
        },
        onTouchEnded: function() {
          let ____args = Array.prototype.slice.call(arguments);
          return bus.fire("touch.one.end", {
            group: "touch",
            event: ____args[1],
            loc: ____args[0].getLocation()
          });
        }
      }, target);
    }).call(this) :
    null);
};
const _STAR_anchors_STAR = {
  Center: cc.p(0.5, 0.5),
  Top: cc.p(0.5, 1),
  TopRight: cc.p(1, 1),
  Right: cc.p(1, 0.5),
  BottomRight: cc.p(1, 0),
  Bottom: cc.p(0.5, 0),
  BottomLeft: cc.p(0, 0),
  Left: cc.p(0, 0.5),
  TopLeft: cc.p(0, 1)
};
////////////////////////////////////////////////////////////////////////////////
//fn: [resolveElastic] in file: ccsx.ky, line: 295
const resolveElastic = function(obj1, obj2) {
  let pos2 = obj2.sprite.getPosition();
  let pos1 = obj1.sprite.getPosition();
  let sz2 = obj2.sprite.getContentSize();
  let sz1 = obj1.sprite.getContentSize();
  let hh1 = (0.5 * sz1.height);
  let hw1 = (0.5 * sz1.width);
  let x = pos1.x;
  let y = pos1.y;
  let skip_QMRK = false;
  let bx2 = bbox4(obj2.sprite);
  let bx1 = bbox4(obj1.sprite);
  return (((bx1.left < bx2.right) && (bx2.right < bx1.right)) ?
    (function() {
      (obj1.vel.x = Math.abs(obj1.vel.x), obj2.vel.x = (-1 * Math.abs(obj2.vel.x)), x = (getRight(obj2.sprite) + hw1));
      return obj1.updatePosition(x, y);
    }).call(this) :
    (((bx1.right > bx2.left) && (bx1.left < bx2.left)) ?
      (function() {
        (obj1.vel.x = (-1 * Math.abs(obj1.vel.x)), obj2.vel.x = Math.abs(obj2.vel.x), x = (getLeft(obj2.sprite) - hw1));
        return obj1.updatePosition(x, y);
      }).call(this) :
      (((bx1.bottom < bx2.top) && (bx1.top > bx2.top)) ?
        (function() {
          (obj1.vel.y = Math.abs(obj1.vel.y), obj2.vel.y = (-1 * Math.abs(obj2.vel.y)), y = (getTop(obj2.sprite) + hh1));
          return obj1.updatePosition(x, y);
        }).call(this) :
        (((bx1.top > bx2.bottom) && (bx2.bottom > bx1.bottom)) ?
          (function() {
            (obj1.vel.y = (-1 * Math.abs(obj1.vel.y)), obj2.vel.y = Math.abs(obj2.vel.y), y = (getBottom(obj2.sprite) - hh1));
            return obj1.updatePosition(x, y);
          }).call(this) :
          null))));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [tmenu] in file: ccsx.ky, line: 338
const tmenu = function(items) {
  let GS__9 = Array.prototype.slice.call(arguments, 1);
  let scale = kirbystdlibref.getIndex(GS__9, 0);
  let menu = new cc.Menu();
  let mi,
    obj;
  for (let i = 0, sz = kirbystdlibref.count(items), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    (obj = items[i], mi = new cc.MenuItemLabel(new cc.LabelBMFont(obj.text, obj.font), obj.selector, obj.target));
    mi.setOpacity((255 * 0.9));
    mi.setScale(opt_QMRK__QMRK(scale, 1));
    mi.setTag((i + 1));
    menu.addChild(mi);
  }
  return menu;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [tmenu1] in file: ccsx.ky, line: 352
const tmenu1 = function(item) {
  let menu = tmenu(item);
  if (( (typeof (item.anchor) !== "undefined") )) {
    menu.setAnchorPoint(item.anchor);
  }
  if (( (typeof (item.x) !== "undefined") )) {
    menu.setPosition(item.x, item.y);
  }
  menu.alignItemsVertically();
  if (( (item.visible === false) )) {
    menu.setVisible(false);
  }
  return menu;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [vmenu] in file: ccsx.ky, line: 362
const vmenu = function(items) {
  let GS__10 = Array.prototype.slice.call(arguments, 1);
  let options = kirbystdlibref.getIndex(GS__10, 0);
  (
  options = opt_QMRK__QMRK(options, {}));
  let m = pmenu(true, items, options.scale, options.padding);
  if (( (typeof (options.x) !== "undefined") )) {
    m.setPosition(options.x, options.y);
  }
  return m;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [hmenu] in file: ccsx.ky, line: 372
const hmenu = function(items) {
  let GS__11 = Array.prototype.slice.call(arguments, 1);
  let options = kirbystdlibref.getIndex(GS__11, 0);
  (
  options = opt_QMRK__QMRK(options, {}));
  let m = pmenu(false, items, options.scale, options.padding);
  if (( (typeof (options.x) !== "undefined") )) {
    m.setPosition(options.x, options.y);
  }
  return m;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [pmenu] in file: ccsx.ky, line: 382
const pmenu = function(vertical_QMRK, items) {
  let GS__12 = Array.prototype.slice.call(arguments, 2);
  let scale = kirbystdlibref.getIndex(GS__12, 0);
  let padding = kirbystdlibref.getIndex(GS__12, 1);
  let menu = new cc.Menu();
  let obj,
    mi;
  for (let i = 0, sz = kirbystdlibref.count(items), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    (obj = items[i], mi = new cc.MenuItemSprite(new cc.Sprite(obj.nnn), new cc.Sprite((obj.sss || obj.nnn)), new cc.Sprite((obj.ddd || obj.nnn)), obj.selector, obj.target));
    if (( (typeof (obj.color) !== "undefined") )) {
      mi.setColor(obj.color);
    }
    if (( (typeof (scale) === "number") )) {
      mi.setScale(scale);
    }
    mi.setTag((i + 1));
    menu.addChild(mi);
  }
  (padding = opt_QMRK__QMRK(padding, 10));
  if ( (!vertical_QMRK) ) {
    menu.alignItemsHorizontallyWithPadding(padding);
  } else {
    menu.alignItemsVerticallyWithPadding(padding);
  }
  return menu;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [pmenu1] in file: ccsx.ky, line: 404
const pmenu1 = function(item) {
  let menu = pmenu(true, [item]);
  if (( (typeof (item.anchor) !== "undefined") )) {
    menu.setAnchorPoint(item.anchor);
  }
  if (( (typeof (item.x) !== "undefined") )) {
    menu.setPosition(item.x, item.y);
  }
  if (( (item.visible === false) )) {
    menu.setVisible(false);
  }
  return menu;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [bmfLabel] in file: ccsx.ky, line: 414
const bmfLabel = function(text, font) {
  let GS__13 = Array.prototype.slice.call(arguments, 2);
  let options = kirbystdlibref.getIndex(GS__13, 0);
  let f = new cc.LabelBMFont(text, font);
  (options = opt_QMRK__QMRK(options, {}));
  if (( (typeof (options.anchor) !== "undefined") )) {
    f.setAnchorPoint(options.anchor);
  }
  if (( (typeof (options.x) !== "undefined") )) {
    f.setPosition(options.x, options.y);
  }
  if (( (typeof (options.color) !== "undefined") )) {
    f.setColor(options.color);
  }
  if (( (options.visible === false) )) {
    f.setVisible(false);
  }
  if (( (typeof (options.scale) === "number") )) {
    f.setScale(options.scale);
  }
  f.setOpacity((0.9 * 255));
  return f;
};
const ____macros = {
  "div2": "(macro* div2 (x) (syntax-quote (* 0.5 (unquote x))))"
};
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.elmo.core.ccsx",
    macros: ____macros
  },
  pointInBox_QMRK: pointInBox_QMRK,
  collide_QMRK: collide_QMRK,
  setDesignResSize: setDesignResSize,
  isPortrait_QMRK: isPortrait_QMRK,
  outOfBound_QMRK: outOfBound_QMRK,
  undoTimer: undoTimer,
  createTimer: createTimer,
  timerDone_QMRK: timerDone_QMRK,
  createSpriteFrame: createSpriteFrame,
  bbox4: bbox4,
  runScene: runScene,
  isTransitioning_QMRK: isTransitioning_QMRK,
  csize: csize,
  halfHW: halfHW,
  bbox: bbox,
  bbox4b4: bbox4b4,
  getScaledHeight: getScaledHeight,
  getHeight: getHeight,
  getScaledWidth: getScaledWidth,
  getWidth: getWidth,
  getLeft: getLeft,
  getRight: getRight,
  getTop: getTop,
  getBottom: getBottom,
  getLastLeft: getLastLeft,
  getLastRight: getLastRight,
  getLastTop: getLastTop,
  getLastBottom: getLastBottom,
  vcenterX: vcenterX,
  vcenterY: vcenterY,
  vcenter: vcenter,
  screenHeight: screenHeight,
  screenWidth: screenWidth,
  vrect: vrect,
  vbox: vbox,
  screenSize: screenSize,
  screenCenter: screenCenter,
  vboxMID: vboxMID,
  traceEnclosure: traceEnclosure,
  getSprite: getSprite,
  hasKeyPad_QMRK: hasKeyPad_QMRK,
  hasMouse_QMRK: hasMouse_QMRK,
  hasTouch_QMRK: hasTouch_QMRK,
  onKeyPolls: onKeyPolls,
  onKeyEvents: onKeyEvents,
  onMouseEvents: onMouseEvents,
  onTouchAll: onTouchAll,
  onTouchOne: onTouchOne,
  _STAR_anchors_STAR: _STAR_anchors_STAR,
  resolveElastic: resolveElastic,
  tmenu: tmenu,
  tmenu1: tmenu1,
  vmenu: vmenu,
  hmenu: hmenu,
  pmenu: pmenu,
  pmenu1: pmenu1,
  bmfLabel: bmfLabel
};