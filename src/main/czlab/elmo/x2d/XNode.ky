;; Copyright (c) 2013-2018, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc ""
      :author "Kenneth Leung"}

  czlab.elmo.x2d.core

  (:require ["kirby"
             :as K :refer []]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmacro class "" [name super &xs]
  `(const ~name (.extend ~super (object ~@xs))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createSoundToggles
  "On/Off toggle for sound."
  [audios cb target & [anchor pos]]
  (var a (new cc/MenuItemToggle
              (_1 audios)
              (_2 audios) cb target))
  (.setSelectedIndex a 0)
  (if anchor
    (.setAnchorPoint a anchor))
  (var menu (new cc/Menu a))
  (if pos
    (.setPosition menu pos)) menu)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn addSSheetNode "" [co sheet & [zx]]
  (var n (-> (get-in (.-xcfg co)
                     [:sheets sheet]) (cx/createSSheetNode)))
  (if-not (number? zx)
    (.addChild co n sheet)
    (.addChild co n sheet zx)) co)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn addSpriteFrame "" [co item' & [pos zx tag]]
  (var [s n] (cond (array? item')
                   [(.getChildByName co (_1 item'))
                    (cx/createSprite (_2 item'))]
                   (string? item')
                   [nil (cx/createSprite item')]))
  (if pos (.setPosition n pos))
  (addItem (or s co) n zx tag) n)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn addItem "" [co item & [zx tag]]
  (if (and (inst? cc/Sprite item)
           (inst? cc/SpriteBatchNode co))
    (.setBatchNode item co))
  (set! zx (opt?? zx 0))
  (set! tag (opt?? tag 0))
  (.addChild co item zx tag) item)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn centerImage "" [co image & [zx tag]]
  (var s (new cc/Sprite image))
  (.setPosition s (cx/center)) (addItem co s zx tag) s)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn removeBatchAll "" [co sheet]
  (do->nil (if-some [p (.getChildByName co sheet)] (.removeAllChildren p))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn removeAll "" [co] (.removeAllChildren co) nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn removeItem "" [co item] (do->nil (if item (.removeFromParent item))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(class XScene
       cc/Scene
       ctor (fn [] (._super this))
       addLayer (fn [y & [zx]]
                  (addItem this y zx (.getIID y)))
       getLayer (fn [tag]
                  (cond (string? tag)
                        (.getChildByName this tag)
                        (number? tag)
                        (.getChildByTag this tag))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(class XLayer
       cc/Layer
       init
       (fn [par & [zx]]
         (._super this)
         (.addLayer par this zx) #t)
       keyPoll
       (fn [k]
         (if (and (>= k 0)
                  (< k 256)) (nth @@keys k) #f))
       deregListeners
       (fn []
         (try (if @@cbMouse (.removeListener cc/eventManager @@cbMouse))
              (if @@cbTouch (.removeListener cc/eventManager @@cbTouch))
              (if @@cbKey (.removeListener cc/eventManager @@cbKey))
              (catch e (set! @@cbMouse nil @@cbTouch nil @@cbKey nil))))
       regListeners
       (fn [] (.deregListeners this)
         (cond (cx/isDesktop?)
               (do (.regoMouse this)
                   (.regoKeyboard this))
               :else (.regoTouch this)))
       onTouchesBegan
       (fn [ts evt]
         (if (= @@tMode
                cc/EventListener.TOUCH_ALL_AT_ONCE)
           (.onTouchStart this ts)
           (.onTouchStart this (_1 ts))))
       onTouchesMoved
       (fn [ts evt]
         (if (= @@tMode
                cc/EventListener.TOUCH_ALL_AT_ONCE)
           (.onTouchMotion this ts)
           (.onTouchMotion this (_1 ts))))
       onTouchesEnded
       (fn [ts evt]
         (if (= @@tMode
                cc/EventListener.TOUCH_ALL_AT_ONCE)
           (.onTouchEnd this ts)
           (.onTouchEnd this (_1 ts))))
       onTouchStart (fn [ts] (raise! "you need to implement this!"))
       onTouchStart (fn [tap] #t)
       onTouchEnd (fn [ts] (raise! "you need to implement this!"))
       onTouchEnd (fn [tap] )
       onTouchMotion (fn [ts] (raise! "you need to implement this!"))
       onKeyPressed
       (fn [k evt]
         (if (and (>= k 0)
                  (< k (n# @@keys))) (aset @@keys k #t)))
       onKeyReleased
       (fn [k evt]
         (if (and (>= k 0)
                  (< k (n# @@keys))) (aset @@keys k #f)))
       onMouseDown
       (fn [evt]
         (when-not @@mouseDown?
           (assign! this
                    :mouseTarget? #f :mouseDown? #t)
           (if (= (.getButton evt) @@mouseBtn)
             (assign! this
                      :mouseTarget?
                      (.onMouseStart this (.getLocationInView evt))))))
       onMouseUp
       (fn [evt]
         (if (= (.getButton evt) @@mouseBtn)
           (.onMouseClick this (.getLocationInView evt)))
         (assign! this :mouseTarget? #f :mouseDown? #f))
       onMouseStart (fn [loc] #t)
       onMouseClick (fn [loc] )
       onMouseScroll (fn [evt] )
       onMouseMotion (fn [loc] )
       onMouseXXX (fn [evt])
       onMouseMove
       (fn [evt]
         (if (and @@mouseTarget?
                  (= @@mouseBtn (.getButton evt)))
           (.onMouseMotion this (.getLocationInView evt))))
       regMouse
       (fn [on?]
         (if-not on?
           (when @@cbMouse
             (.removeListener cc/eventManager @@cbMouse)
             (nil! @@cbMouse))
           (when (nil? @@cbMouse)
             (var me this cb #(.onMouseXXX me %))
             (set! @@cbMouse
                   (.create cc/EventListener
                            `{event cc/EventListener.MOUSE
                              onMouseScroll cb
                              onMouseMove cb
                              onMouseUp cb
                              onMouseDown cb}))
             (.addListener cc/eventManager @@cbMouse))) @@cbMouse)
       regKeys
       (fn [on?]
         (if-not on?
           (when @@cbKeys
             (.removeListener cc/eventManager @@cbKeys)
             (nil! @@cbKeys))
           (when (nil? @@cbKeys)
             (var me this
                  cbf #(.onKeyXXX me %1 %2 #f)
                  cbt #(.onKeyXXX me %1 %2 #t))
             (set! @@cbKeys
                   (.create cc/EventListener
                            `{event cc/EventListener.KEYBOARD
                              onKeyPressed cbt
                              onKeyReleased cbf }))
             (.addListener cc/eventManager @@cbKeys))) @@cbKeys)
       regTouch
       (fn [on?]
         (if-not on?
           (when @@cbTouch (.removeListener
                             cc/eventManager @@cbTouch) (nil! @@cbTouch))
           (when (nil? @@cbTouch)
             (var me this)
             (set! @@cbTouch
                   (.create cc/EventListeneer
                            `{event cc/EventListener.TOUCH_ONE_BY_ONE
                              swallowTouches true
                              onTouchBegan (fn [] #t)
                              onTouchMoved (fn [] )
                              onTouchEnded (fn []) }))
             (.addListener cc/eventManager @@cbTouch))) @@cbTouch)

       ctor
       (fn []
         (assign! this
                  ;:tMode cc/EventListener.TOUCH_ALL_AT_ONCE
                  :tMode cc/EventListener.TOUCH_ONE_BY_ONE
                  :mouseListener nil
                  :mouseBtn cc/EventMouse.BUTTON_LEFT
                  :mouseEnabled? #f
                  :mouseTarget? #f
                  :mouseDown? #f
                  :keys (fillArray 256 #f)))
       isMouseEnabled? (fn [] @@mouseEnabled)
       getIID (fn [] 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const GMode `{ ONE 1 TWO 2 NET 3 NICHTS -1 })

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(class GameScene
       XScene
       ctor (fn [cfg]
              (._super this)
              (assign! this
                       :cfg cfg
                       :pools {}
                       :msgQ {}
                       :state 0
                       :level 1))
       getCurLevel (fn [] (.getLevel @@cfg @@level))
       getLevelCfg (fn [] (.getLevelCfg @@cfg @@level))
       getPool (fn [p] (get @@pools p))
       createPool (fn [p] (assoc! @@pools p (new ecs/EntityPool )))
       resetPools (fn [] (K/resetMap! @@pools))
       getMode (fn [] (.-mode @@context))
       isOnline? (fn [] (some? (.-odin @@context)))
       getEnclosureRect (fn [] (cx/visRect))
       getEnclosureBox (fn [] (cx/visBox))
       play (fn [] (set! @@state 911))
       isLive? (fn [] (> @@state 0))
       stop! (fn [] (set! @@state 0))
       getLevel (fn [] @@level)
       sendMsg (fn [topic] (sendMsgEx topic nil)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(class GameLayer
       XLayer
       decoPost (fn []
                  (when @@engine
                    (.ignite @@engine))
                  (.scheduleUpdate this))
       preDeco (fn []
                 (cx/resumeAudio #t #t)
                 (.enableListeners this))
       surcease (fn []
                  (.disableListeners this)
                  (cx/pauseAudio #t #t)
                  (.unscheduleUpdate this))
       update (fn [dt]
                (if (and (not (cx/isTransitioning?))
                         (.isLive MainGameScene)
                         (some? @@engine))
                  (.update @@engine dt)))
       ctor (fn [] (assign! this :engine nil)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(class XLives
       cc/Node
       reduce (fn [&[x]]
                (set! x (opt?? x 1))
                (while (> x 0)
                  (when (> @@icons.size 0)
                    ;;auto it= _icons.back(); it->removeFromParent(); _icons.pop_back();
                    nil)
                  (-= x 1)
                  (-= @@curLives 1)))
       reset (fn []
               (each #(.removeFromParent %) @@icons)
               (K/resetVec! @@icons)
               (set! @@curLives @@totalLives))
       resurrect (fn [] (.reset this) (.drawLives this))
       drawLives (fn []
                   (var~ v x y)
                   (dotimes [n @@curLives]
                     (set! v (cx/createSprite @@frameId))
                     (.setScale v @@scale)
                     (when (zero? n)
                       (set! @@lifeSize (cx/scaleSize (CC_CSIZE v) @@scale)
                             y (- (.-y @@refPt) (HHZ @@lifeSize))
                             x (+ (.-x @@refPt) (HWZ @@lifeSize))))
                     (.setPosition v x y)
                     (.addChild this v)
                     (conj! @@icons v)
                     (if (> @@dir 0)
                       (+= x (* 1.2 (.-width @@lifeSize)))
                       (-= x (* 1.2 (.-width @@lifeSize))))))
       initLives (fn [frame lives x y & [scale d]]
                   (set! @@totalLives lives
                         @@frameId frame
                         @@curLives 0
                         @@dir (opt?? d 1)
                         @@scale (opt?? scale 1)
                         @@refPt (cc/p x y))
                   (.reset this)
                   (.drawLives this))
       ctor (fn [] (assign! this
                            :icons []
                            :lifeSize (cc/size 0 0)
                            :refPt (cc/p 0 0)
                            :frameId ""
                            :scale 1
                            :dir 1
                            :totalLives 0
                            :curLives 0))
       isDead? (fn [] (<= @@curLives 0))
       getLives (fn [] @@curLives))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF



