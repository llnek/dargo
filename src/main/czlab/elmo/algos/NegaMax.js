/*Auto generated by Kirby v1.0.0 - Thu Jan 25 2018 17:52:02 GMT-0800 (PST)
  czlab.elmo.ecs.NegaMax
{"doc":"","author":"Kenneth Leung"}
*/

const ky= require("kirby");
const fillArray=ky["fillArray"];
const kirbystdlibref= require("kirby");
const __module_namespace__= "czlab.elmo.ecs.NegaMax";
const PINF=1000000;
class FFrame {
////////////////////////////////////////////////////////////////////////////////
//fn: [constructor] in file: NegaMax.ky, line: 15
constructor (n) {
(this["lastBestMove"]=-1,this["other"]=-1,this["cur"]=-1,this["state"]=fillArray((n * n),0));
return this;
};
}
//Generic game-board interface
class GameBoard {
////////////////////////////////////////////////////////////////////////////////
//fn: [constructor] in file: NegaMax.ky, line: 25
constructor (sz) {
return this;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getNextMoves] in file: NegaMax.ky, line: 27
getNextMoves (frame) {
return null;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [evalScore] in file: NegaMax.ky, line: 28
evalScore (frame) {
return null;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [isStalemate?] in file: NegaMax.ky, line: 30
isStalemate_QMRK (frame) {
return null;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [isOver?] in file: NegaMax.ky, line: 31
isOver_QMRK (frame) {
return null;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [undoMove] in file: NegaMax.ky, line: 33
undoMove (frame,move) {
return null;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [makeMove] in file: NegaMax.ky, line: 34
makeMove (frame,move) {
return null;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [switchPlayer] in file: NegaMax.ky, line: 36
switchPlayer (frame) {
return null;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [takeFFrame] in file: NegaMax.ky, line: 37
takeFFrame () {
return null;
};
}
////////////////////////////////////////////////////////////////////////////////
//fn: [negaMax*] in file: NegaMax.ky, line: 40
const negaMax_STAR = function (board,game,maxDepth,depth,alpha,beta) {
let openMoves=board.getNextMoves(game);
let bestMove=kirbystdlibref.getProp(openMoves,0);
let bestValue=(-1 * PINF);
if ((depth === maxDepth)) {
(game["lastBestMove"]=kirbystdlibref.getProp(openMoves,0));
};
let rc,move;
for (let i=0,sz=kirbystdlibref.count(openMoves),____break=false;((!____break) && (i < sz)); i=(i + 1)){
(move=openMoves[i]);
board.makeMove(game,move);
board.switchPlayer(game);
(rc=(-1 * negaMax(board,game,maxDepth,(depth - 1),(-1 * beta),(-1 * alpha))));
board.switchPlayer(game);
board.undoMove(game,move);
(bestValue=Math.max(bestValue,rc));
if ((alpha < rc)) {
(alpha=rc,bestMove=move);
if ((depth === maxDepth)) {
(game["lastBestMove"]=move);
};
if ((alpha >= beta)) {
(____break=true);
};
};
}
return bestValue;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [negaMax] in file: NegaMax.ky, line: 76
//nega Min-Max algo function
const negaMax = function (board,game,maxDepth,depth,alpha,beta) {
return ((((depth === 0)) || board.isOver_QMRK(game)) ?
board.evalScore(game) :
negaMax_STAR(board,game,maxDepth,depth,alpha,beta));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [evalNegaMax] in file: NegaMax.ky, line: 86
//Main method for nega-max algo
const evalNegaMax = function (board) {
let ptr=board.takeFFrame();
negaMax(board,ptr,10,10,(-1 * PINF),PINF);
return kirbystdlibref.getProp(ptr,"lastBestMove");
};
module.exports = {
da57bc0172fb42438a11e6e8778f36fb: { ns: "czlab.elmo.ecs.NegaMax", macros: {} },
PINF:PINF,
FFrame:FFrame,
GameBoard:GameBoard,
negaMax:negaMax,
evalNegaMax:evalNegaMax
};