
(ns ^{:doc "" :author ""}

  czlab.elmo.x2d.XNodes

  (:require ["kirby"
             :as K :refer []]))

;#define __decl_get_iid(x) virtual int getIID() { return x; }
;#define __decl_update() virtual void update(float);
;#define __decl_deco_ui() virtual void decoUI();

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;struct CC_DLL SCTX { int count=1; };

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype XNode []

  (constructor []
    (assign! this
             :atlases {}
             :self this
             :context {:count 1}))

  (addAudioIcons [audios anchor pos]
    (var cb
         (fn [r]
           (->> (= 0 (.getSelectedIndex r))
                (.toggleAudio xcfg)))
         audio (.createWithCallback
                 cc/MenuItemToggle cb audios))
    (.setSelectedIndex audio
                       (if (.hasAudio? xcfg) 0 1))
    (.setAnchorPoint audio anchor)
    ;;need null to end var-args
    (var menu (.create cc/Menu audio nil))
    (.setPosition menu pos)
    (.addChild _self menu)
    menu)


  (setCtx [ctx] (assign! this :context ctx))
  (ejectCtx [] (assign! this :context nil))

  (gets [key & pms]
    (.getL10NStr xcfg key pms))

  (regoAtlas [name zx]
    (var a (cx/createSpriteBatch name))
    (assoc! @@atlases name a)
    (.addChild @@self a zx)
    a)

  (getAtlas [name] (get @@atlases name))

  (addAtlasFrame
    "Add an image chosen from this atlas"
    [atlas frame pos z tag]
    (var tt (cx/createSprite frame))
    (.setPosition tt pos)
    (.addAtlasItem this atlas tt z tag))


//////////////////////////////////////////////////////////////////////////////
//
void XNode::addAtlasFrame(const sstr &atlas,
                          const sstr &frame,
                          const CCT_PT &pos) {
  addAtlasFrame(atlas, frame,pos,0,0);
}

//////////////////////////////////////////////////////////////////////////////
// Add an image
void XNode::addFrame(const sstr &frame, const CCT_PT &pos, int z, int tag) {
  auto tt= cx::reifySprite(frame);
  tt->setPosition(pos);
  addItem(tt, z, tag);
}

//////////////////////////////////////////////////////////////////////////////
//
void XNode::addFrame(const sstr &frame, const CCT_PT &pos) {
  addFrame(frame, pos,0,0);
}

//////////////////////////////////////////////////////////////////////////////
// Add a child to this atlas
void XNode::addAtlasItem(const sstr &atlas, not_null<c::Node*> n, int z, int tag) {

  auto ss = DCAST(c::Sprite*, n.get());
  auto p= getAtlas(atlas);

  CCASSERT(p != nullptr, "atlas cannot be null");

  if (N_NIL(ss)) { ss->setBatchNode(p); }
  p->addChild(n.get(), z, tag);
}

//////////////////////////////////////////////////////////////////////////////
//
void XNode::addAtlasItem(const sstr &atlas, not_null<c::Node*> n) {
  addAtlasItem(atlas, n, 0,0);
}

//////////////////////////////////////////////////////////////////////////////
// Add a child
void XNode::addItem(not_null<c::Node*> n, int z, int tag) {
  _self->addChild(n.get(), z, tag);
}

//////////////////////////////////////////////////////////////////////////////
// Add a child
void XNode::addItem(not_null<c::Node*> n) {
  addItem(n, 0,0);
}

//////////////////////////////////////////////////////////////////////////////
//
c::Sprite* XNode::centerImage(const sstr &name, int z) {
  auto t= CC_TCAC()->addImage(XCFG()->getImage(name));
  auto s= c::Sprite::createWithTexture(t);
  s->setPosition(cx::center());
  _self->addChild(s,z);
  return s;
}

//////////////////////////////////////////////////////////////////////////////
// Remove all children from this atlas
//
void XNode::removeAtlasAll(const sstr &atlas) {
  auto a=getAtlas(atlas);
  if (N_NIL(a)) { a->removeAllChildren(); }
}

//////////////////////////////////////////////////////////////////////////////
// Remove all children
//
void XNode::removeAll() {
  _self->removeAllChildren();
}

//////////////////////////////////////////////////////////////////////////////
// Remove a child
//
void XNode::removeItem(c::Node *n) {
  if (N_NIL(n)) {
    n->removeFromParent();
  }
}


NS_END



