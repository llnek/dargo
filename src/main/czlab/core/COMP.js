/*Auto generated by Kirby v1.0.0 - Thu Jan 25 2018 23:01:54 GMT-0800 (PST)
  czlab.elmo.ecs.COMP
{"doc":"","author":"Kenneth Leung"}
*/

const ky = require("kirby");
const kirbystdlibref = require("kirby");
const __module_namespace__ = "czlab.elmo.ecs.COMP";
class CGesture extends ecs.Component {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 12
  constructor() {
    (this["tpid"] = "czlab.elmo.ecs.COMP/CGesture", this["right"] = false, this["left"] = false, this["top"] = false, this["bottom"] = false);
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [hasMoved?] in file: COMP.ky, line: 20
  hasMoved_QMRK() {
    return (this.down || this.up || this.right || this.left);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [reset] in file: COMP.ky, line: 23
  reset() {
    return (this["down"] = false, this["up"] = false, this["right"] = false, this["left"] = false);
  }
}
class CHealth extends ecs.Component {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [alive?] in file: COMP.ky, line: 31
  alive_QMRK() {
    return (this.curHP > 0);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 33
  constructor() {
    let GS__3 = Array.prototype.slice.call(arguments, 0);
    let h = GS__3[0];
    let c = GS__3[1];
    (this["godMode"] = false, this["tpid"] = "czlab.elmo.ecs.COMP/CHealth", this["origHP"] = opt_QMRK__QMRK(h, 1), this["curHP"] = opt_QMRK__QMRK(c, opt_QMRK__QMRK(h, 1)));
    if ( (this.curHP <= this.origHP) ) {
      true;
    } else {
      throw new Error("bad health values");
    }
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [hurt] in file: COMP.ky, line: 41
  hurt() {
    let GS__4 = Array.prototype.slice.call(arguments, 0);
    let damage = GS__4[0];
    (
    damage = opt_QMRK__QMRK(damage, 1));
    return ((!this.godMode) ?
      (this.curHP -= damage) :
      null);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [reset] in file: COMP.ky, line: 46
  reset() {
    return (this["godMode"] = false, this["curHP"] = this.origHP);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [enterGodMode] in file: COMP.ky, line: 51
  enterGodMode() {
    return (this["godMode"] = true);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [exitGodMode] in file: COMP.ky, line: 52
  exitGodMode() {
    return (this["godMode"] = false);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [setHealth] in file: COMP.ky, line: 54
  setHealth(h) {
    return (this["origHP"] = h, this["curHP"] = h);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [percent] in file: COMP.ky, line: 57
  percent() {
    return ky.percent(this.curHP, this.origHP);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [ratio] in file: COMP.ky, line: 59
  ratio() {
    return (curHP / origHP);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [isGod?] in file: COMP.ky, line: 61
  isGod_QMRK() {
    return this.godMode;
  }
}
class Looper extends ecs.Component {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 66
  constructor() {
    (this["tm"] = DLTimer(), this["tpid"] = "czlab.elmo.ecs.COMP/Looper");
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [destructor] in file: COMP.ky, line: 71
  destructor() {
    return CC_DROP(tm.timer);
  }
}
class Loopers extends ecs.Component {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 76
  constructor() {
    (this["tms"] = [], this["tpid"] = "czlab.elmo.ecs.COMP/Loopers");
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [destructor] in file: COMP.ky, line: 81
  destructor() {
    return (function() {
      let GS__5 = this.tms;
      for (let GS__7 = 0, GS__6 = false, ____break = false; ((!____break) && ((!GS__6) && (GS__7 < GS__5.length))); GS__7 = (GS__7 + 1)) {
        let z = kirbystdlibref.getProp(GS__5, GS__7);
        null;
        if ( (!true) ) {
          (
          GS__6 = true);
        } else {
          null;
        }
        if ( ((!GS__6) && true) ) {
          CC_DROP(z.timer);
        }
      }
      return null;
    }).call(this);
  }
}
class CAutoma extends ecs.Component {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 88
  constructor() {
    (
    this["tpid"] = "czlab.elmo.ecs.COMP/CAutoma");
    return this;
  }
}
class CHuman extends ecs.Component {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 94
  constructor() {
    (
    this["tpid"] = "czlab.elmo.ecs.COMP/CHuman");
    return this;
  }
}
class CTarget extends ecs.Component {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 99
  constructor() {
    (
    this["tpid"] = "czlab.elmo.ecs.COMP/CTarget");
    return this;
  }
}
class CStats extends ecs.Component {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 105
  constructor(v) {
    (this["tpid"] = "czlab.elmo.ecs.COMP/CStats", this["state"] = 0, this["value"] = v);
    return this;
  }
}
class CMelee extends ecs.Component {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 114
  constructor() {
    (this["tpid"] = "czlab.elmo.ecs.COMP/CMelee", this["lastDamageTime"] = 0, this["selfDie?"] = false, this["damage"] = 0, this["damageRate"] = 0);
    return this;
  }
}
////////////////////////////////////////////////////////////////////////////////
//fn: [hypotenuse] in file: COMP.ky, line: 123
const hypotenuse = function(vector) {
  let GS__8 = Array.prototype.slice.call(arguments, 1);
  let angle = GS__8[0];
  (
  angle = opt_QMRK__QMRK(angle, (Math.PI / 4)));
  return cc.p((vector * Math.cos * angle), (vector * Math.sin * angle));
};
class CMove extends ecs.Component {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 131
  constructor() {
    let GS__9 = Array.prototype.slice.call(arguments, 0);
    let mspeed = GS__9[0];
    let macc = GS__9[1];
    let target = GS__9[2];
    (this["tpid"] = "czlab.elmo.ecs.COMP/CMove", this["maxSpeed"] = (((typeof (mspeed) === "number")) ?
      hypotenuse(mspeed) :
      cc.p()), this["maxAccel"] = (((typeof (macc) === "number")) ?
      hypotenuse(macc) :
      cc.p()), this["moveTarget"] = opt_QMRK__QMRK(target, cc.p()), this["lastPos"] = cc.p(), this["nextPos"] = cc.p(), this["speed"] = cc.p(), this["accel"] = cc.p(), this["vel"] = cc.p(), this["acc"] = cc.p(), this["interval"] = 0, this["power"] = 0, this["angle"] = 0);
    return this;
  }
}
class UICObj extends ecs.Component {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 152
  constructor(n) {
    (this["node"] = n, this["tpid"] = "czlab.elmo.ecs.COMP/CPixie");
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [flipAuto] in file: COMP.ky, line: 157
  flipAuto(b) {
    return (this["auto?"] = b);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [isAuto?] in file: COMP.ky, line: 159
  isAuto_QMRK() {
    return kirbystdlibref.getProp(this, "auto?");
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [bindNode] in file: COMP.ky, line: 161
  bindNode(n) {
    return (this["auto?"] = true, this["node"] = n);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [hide] in file: COMP.ky, line: 164
  hide() {
    return (this.node ?
      this.node.setVisible(false) :
      null);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [show] in file: COMP.ky, line: 165
  show() {
    return (this.node ?
      this.node.setVisible(true) :
      null);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [inflate] in file: COMP.ky, line: 167
  inflate() {
    let GS__10 = Array.prototype.slice.call(arguments, 0);
    let x = GS__10[0];
    let y = GS__10[1];
    return (this.node ?
      (function() {
        if ( (((typeof (x) === "number")) && ((typeof (y) === "number"))) ) {
          this.node.setPosition(x, y);
        }
        return this.show();
      }).call(this) :
      null);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [deflate] in file: COMP.ky, line: 174
  deflate() {
    return (this.node ?
      (function() {
        node.unscheduleAllCallbacks();
        this.node.stopAllActions();
        return this.hide();
      }).call(this) :
      null);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [height] in file: COMP.ky, line: 180
  height() {
    return (this.node ?
      kirbystdlibref.getProp(kirbystdlibref.getProp(this.node.boundingBox(), "size"), "height") :
      0);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [width] in file: COMP.ky, line: 186
  width() {
    return (this.node ?
      kirbystdlibref.getProp(kirbystdlibref.getProp(this.node.boundingBox(), "size"), "width") :
      0);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [bbox] in file: COMP.ky, line: 192
  bbox() {
    return (this.node ?
      this.node.boundingBox() :
      cc.rect());
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [setPos] in file: COMP.ky, line: 196
  setPos(x, y) {
    return (this.node ?
      this.node.setPosition(x, y) :
      null);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [pos] in file: COMP.ky, line: 199
  pos() {
    return (this.node ?
      this.node.getPosition() :
      cc.p());
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [csize] in file: COMP.ky, line: 202
  csize() {
    return (this.node ?
      kirbystdlibref.getProp(this.node.getBoundingBox(), "size") :
      cc.size());
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [circum] in file: COMP.ky, line: 206
  circum() {
    return (this.node ?
      kirbystdlibref.getProp(kirbystdlibref.getProp(this.node.getBoundingBox(), "size"), "width") :
      0);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [radius] in file: COMP.ky, line: 212
  radius() {
    return (0.5 * this.circum());
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [tag] in file: COMP.ky, line: 214
  tag() {
    return (this.node ?
      this.node.getTag() :
      0);
  }
}
class CPixie extends UICObj {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 220
  constructor(s) {
    super((s ?
      s :
      new cc.Sprite()));
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [reifyFrame] in file: COMP.ky, line: 222
  static reifyFrame(n) {
    let s = new cc.Sprite();
    s.initWithSpriteFrameName(n);
    s.autorelease();
    return new CPixie(s);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [reifyFile] in file: COMP.ky, line: 228
  static reifyFile(n) {
    let s = new cc.Sprite();
    s.initWithFile(n);
    s.autorelease();
    return new CPixie(s);
  }
}
class CDrawNode extends UICObj {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 237
  constructor(s) {
    super((s ?
      s :
      new cc.DrawNode()));
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [reify] in file: COMP.ky, line: 239
  static reify() {
    let z = new cc.DrawNode();
    z.init();
    z.autorelease();
    return new CDrawNode(z);
  }
}
class CNode extends UICObj {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 248
  constructor(n) {
    super((n ?
      n :
      new cc.Node()));
    return this;
  }
}
class CLayer extends UICObj {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 253
  constructor(y) {
    super((y ?
      y :
      new cc.Layer()));
    return this;
  }
}
class ColorLayer extends UICObj {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: COMP.ky, line: 258
  constructor(n) {
    super((n ?
      n :
      new cc.LayerColor()));
    return this;
  }
}
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.elmo.ecs.COMP",
    macros: {}
  },
  CGesture: CGesture,
  CHealth: CHealth,
  Looper: Looper,
  Loopers: Loopers,
  CAutoma: CAutoma,
  CHuman: CHuman,
  CTarget: CTarget,
  CStats: CStats,
  CMelee: CMelee,
  hypotenuse: hypotenuse,
  CMove: CMove,
  UICObj: UICObj,
  CPixie: CPixie,
  CDrawNode: CDrawNode,
  CNode: CNode,
  CLayer: CLayer,
  ColorLayer: ColorLayer
};