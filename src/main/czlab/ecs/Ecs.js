/*Auto generated by Kirby v1.0.0 - Fri Feb 02 2018 17:40:36 GMT-0800 (PST)
  

*/

const K = require("kirby");
const nichts_QMRK = K["nichts_QMRK"];
const some_QMRK = K["some_QMRK"];
const opt_QMRK__QMRK = K["opt_QMRK__QMRK"];
const conj_BANG = K["conj_BANG"];
const MAX_DASH_INT = K["MAX_DASH_INT"];
const kirbystdlibref = require("kirby");
const __module_namespace__ = "czlab.elmo.ecs.Ecs";
class EntityPool {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: Ecs.ky, line: 21
  constructor(name, ctor, batch) {
    (this["name"] = name, this["objs"] = [], this["ctor"] = ctor, this["batch"] = batch);
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [preset] in file: Ecs.ky, line: 24
  preset() {
    for (let n = 0, GS__3 = this.batch, ____break = false; ((!____break) && (n < GS__3)); n = (n + 1)) {
      let GS__4 = this.ctor();
      let r = GS__4;
      if ( (((typeof (GS__4) === "undefined")) || ((GS__4 === null))) ) {
        null;
      } else {
        conj_BANG(this.objs, r);
      }
    }
    return null;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [get] in file: Ecs.ky, line: 29
  get() {
    return (this.find(function() {
        let ____args = Array.prototype.slice.call(arguments);
        return kirbystdlibref.getProp(____args[0], "poolable?");
      }) || (function() {
        this.preset();
        return this.get();
      }).call(this));
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [take] in file: Ecs.ky, line: 33
  take() {
    return (function() {
      let GS__5 = this.get();
      let r = GS__5;
      return ((!(((typeof (GS__5) === "undefined")) || ((GS__5 === null)))) ?
        (function() {
          (
          r["poolable?"] = false);
          return r;
        }).call(this) :
        null);
    }).call(this);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [getAt] in file: Ecs.ky, line: 36
  getAt(pos) {
    return kirbystdlibref.getProp(this.objs, pos);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [foreach] in file: Ecs.ky, line: 37
  foreach(f) {
    return this.objs.forEach(f);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [find] in file: Ecs.ky, line: 38
  find(cb) {
    return this.objs.find(cb);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [some] in file: Ecs.ky, line: 39
  some(f) {
    return this.objs.some(f);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [size] in file: Ecs.ky, line: 41
  size() {
    return kirbystdlibref.count(this.objs);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [clearAll] in file: Ecs.ky, line: 43
  clearAll() {
    return (function() {
      let GS__6 = null;
      this.reset();
      K.resetVec_BANG(this.objs);
      return GS__6;
    }).call(this);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [actives] in file: Ecs.ky, line: 46
  actives() {
    return this.objs.filter(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return (!kirbystdlibref.getProp(____args[0], "poolable?"));
    });
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [reset] in file: Ecs.ky, line: 49
  reset() {
    return (function() {
      let GS__7 = null;
      this.objs.forEach(function() {
        let ____args = Array.prototype.slice.call(arguments);
        return (____args[0]["poolable?"] = true);
      });
      return GS__7;
    }).call(this);
  }
}
class Component {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: Ecs.ky, line: 54
  constructor() {
    let GS__8 = Array.prototype.slice.call(arguments, 0);
    let e = GS__8[0];
    (this["tpid"] = "", this["entity"] = opt_QMRK__QMRK(e, null));
    return this;
  }
}
const SystemPriority = (new Map([["PreUpdate", 100], ["NetPlay", 200], ["AI", 300], ["Motion", 400], ["Move", 500], ["Logic", 600], ["Collide", 700], ["Resolve", 800], ["Render", 900], ["Error", -1]]));
var lastId = 0;
////////////////////////////////////////////////////////////////////////////////
//fn: [generateEid] in file: Ecs.ky, line: 75
const generateEid = function(pfx) {
  let rc = ++lastId;
  if ( (!(rc < MAX_DASH_INT)) ) {
    throw new Error("too many entities");
  } else {
    null;
  }
  return [pfx, rc].join("");
};
class Engine {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: Ecs.ky, line: 82
  constructor() {
    let GS__9 = Array.prototype.slice.call(arguments, 0);
    let cfg = GS__9[0];
    (this["config"] = opt_QMRK__QMRK(cfg, null), this["updating?"] = false, this["pools"] = [], this["systems"] = [], this["ents"] = (new Map([])), this["types"] = (new Map([])));
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [unbind] in file: Ecs.ky, line: 89
  unbind(co, ent) {
    let cid = ((co instanceof Component) ?
      co.tpid :
      co);
    let GS__10 = kirbystdlibref.getProp(this.types, cid);
    let m = GS__10;
    if ( (!(((typeof (GS__10) === "undefined")) || ((GS__10 === null)))) ) {
      kirbystdlibref.dissoc_BANG(m, ent.eid);
    }
    return null;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [bind] in file: Ecs.ky, line: 93
  bind(co, ent) {
    let m = kirbystdlibref.getProp(this.types, co.tpid);
    if (nichts_QMRK(m)) {
      (
      m = (new Map([])));
      (kirbystdlibref.assoc_BANG(this.types, co.tpid, m));
    }
    (kirbystdlibref.assoc_BANG(m, ent.eid, co));
    return null;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [find] in file: Ecs.ky, line: 100
  find(comType) {
    let comTypes = Array.prototype.slice.call(arguments, 1);
    let pmin = MAX_DASH_INT;
    let missed_QMRK = false;
    let pm = null;
    let ccs = [];
    let ret = [];
    comTypes.unshift(comType);
    let pmks,
      ccsz,
      eid,
      cid,
      c,
      sum;
    for (let i = 0, sz = kirbystdlibref.count(comTypes), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
      (cid = comTypes[i], c = kirbystdlibref.getProp(this.types, cid));
      if (nichts_QMRK(c)) {
        (
        missed_QMRK = true);
        (
        ____break = true);
      } else {
        if (true) {
          if ( (kirbystdlibref.count(c) < pmin) ) {
            (pmin = kirbystdlibref.count(c), pm = c);
          }
          conj_BANG(ccs, c);
        }
      }
    }
    (ccsz = kirbystdlibref.count(ccs));
    if ( ((ccsz > 0) && (!missed_QMRK)) ) {
      (
      pmks = Array.from(pm.keys()));
      for (let i = 0, sz = kirbystdlibref.count(pmks), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
        (sum = 0, eid = pmks[i]);
        for (let j = 0, ____break = false; ((!____break) && (j < ccsz)); j = (j + 1)) {
          (
          c = ccs[j]);
          if ( (c === pm) ) {
            ++sum;
          } else {
            if (kirbystdlibref.getProp(c, eid)) {
              ++sum;
            }
          }
        }
        if ( (sum === ccsz) ) {
          let GS__11 = kirbystdlibref.getProp(this.ents, eid);
          let e = GS__11;
          if ( (((typeof (GS__11) === "undefined")) || ((GS__11 === null))) ) {
            null;
          } else {
            conj_BANG(ret, e);
          }
        }
      }
    }
    return ret;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [addSystem] in file: Ecs.ky, line: 135
  addSystem(s) {
    conj_BANG(this.systems, s);
    sort(System.compare, this.systems);
    return s;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [removeSystem] in file: Ecs.ky, line: 139
  removeSystem(s) {
    let p = this.systems.indexOf(s);
    if ( (!((p < 0))) ) {
      this.systems.splice(p, 1);
      sort(System.compare, this.systems);
    }
    return null;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [deleteSystems] in file: Ecs.ky, line: 145
  deleteSystems() {
    K.resetVec_BANG(this.systems);
    return null;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [getSystem] in file: Ecs.ky, line: 148
  getSystem(s) {
    return this.systems.find(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return (s == kirbystdlibref.getProp(____args[0], "sid"));
    });
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [update] in file: Ecs.ky, line: 151
  update(time) {
    (
    this["updating?"] = true);
    let stop_QMRK = false;
    this.systems.forEach(function(s) {
      return (((!stop_QMRK) && kirbystdlibref.getProp(s, "active?")) ?
        (function() {
          return ((!s.update(time)) ?
            (stop_QMRK = true) :
            null);
        }).call(this) :
        null);
    });
    (
    this["updating?"] = false);
    return null;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [ignite] in file: Ecs.ky, line: 160
  ignite(prologue) {
    prologue();
    this.systems.forEach(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return ____args[0].preamble();
    });
    return null;
  }
}
class Entity {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: Ecs.ky, line: 167
  constructor(engine) {
    let GS__12 = Array.prototype.slice.call(arguments, 1);
    let name = GS__12[0];
    (this["poolable?"] = true, this["status"] = true, this["name"] = opt_QMRK__QMRK(name, ""), this["comps"] = (new Map([])), this["engine"] = engine, this["eid"] = generateEid("ent:"));
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [checkin] in file: Ecs.ky, line: 176
  checkin(co) {
    if ( (!this.has_QMRK(co.tpid)) ) {
      true;
    } else {
      throw new Error("Cannot add co twice");
    }
    this.engine.bind(co, this);
    (
    co["entity"] = this);
    (kirbystdlibref.assoc_BANG(this.comps, co.tpid, co));
    return co;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [checkout] in file: Ecs.ky, line: 182
  checkout(comType) {
    return (function() {
      let GS__13 = kirbystdlibref.getProp(this.comps, comType);
      let co = GS__13;
      return ((!(((typeof (GS__13) === "undefined")) || ((GS__13 === null)))) ?
        (function() {
          kirbystdlibref.dissoc_BANG(this.comps, comType);
          this.engine.unbind(co, this);
          return co;
        }).call(this) :
        null);
    }).call(this);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [get] in file: Ecs.ky, line: 187
  get(comType) {
    return kirbystdlibref.getProp(this.comps, comType);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [getAll] in file: Ecs.ky, line: 188
  getAll() {
    return Array.from(this.comps.values());
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [has?] in file: Ecs.ky, line: 189
  has_QMRK(comType) {
    return some_QMRK(kirbystdlibref.getProp(this.comps, comType));
  }
}
class System {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [update] in file: Ecs.ky, line: 194
  update(time) {
    return this.evalFunc(time);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [compare] in file: Ecs.ky, line: 196
  compare(x, y) {
    return ((x.priority < y.priority) ?
      -1 :
      ((x.priority > y.priority) ?
        1 :
        0));
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: Ecs.ky, line: 200
  constructor(priority, engine, func) {
    (this["active?"] = true, this["evalFunc"] = func, this["engine"] = engine, this["priority"] = priority);
    return this;
  }
}
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.elmo.ecs.Ecs",
    macros: {}
  },
  EntityPool: EntityPool,
  Component: Component,
  SystemPriority: SystemPriority,
  Engine: Engine,
  Entity: Entity,
  System: System
};