;; Copyright (c) 2013-2018, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc ""
      :author "Kenneth Leung"}

  czlab.elmo.ecs.test

  (:require ["./Ecs" :as ecs]
            ["kirby"
             :as K :refer [conj! some? println runtest]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype Leg [ecs/Component]
  (constructor [&[n]]
    (super n)
    (assign! this :tpid :leg :length 50)))

(deftype Arm [ecs/Component]
  (constructor [&[n]]
    (super n)
    (assign! this :tpid :arm :length 10)))

(deftype Person [ecs/Entity]
  (constructor [e] (super e))
  (finz []
    (.checkout this Arm Leg))
  (init [&args]
    (.checkin this (new Arm this))
    (.checkin this (new Leg this))))

(const- engine (new ecs/Engine ))

(const- pool1 (new ecs/EntityPool
                   "p1" engine Person 6))

(def- TEMP-VAR nil)

(defn- prologue' "" [engine] (set! TEMP-VAR []))
(defn- sys1 "" [e t] (if (pos? t) (conj! TEMP-VAR 1)))
(defn- sys2 "" [e t] (if (pos? t) (conj! TEMP-VAR 2)))
(defn- sys3 "" [e t] (if (pos? t) (conj! TEMP-VAR 3)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftest ecs-test

  (ensure (zero? (.poolSize pool1)) "pool,size=0")
  (ensure (let [x (.take pool1)
                y (.take pool1)
                z (.take pool1)]
            (= 3 (.countUsed pool1))) "pool,used")
  (ensure (let [x (.take pool1)
                y (.take pool1)
                z (.take pool1)]
            (.drop pool1 z)
            (= 5 (.countUsed pool1))) "pool,drop")
  (ensure (= 6 (.poolSize pool1)) "pool,size>0")
  (ensure (let [x (.take pool1)
                y (.take pool1)
                z (.take pool1)]
            (.drop pool1 x)
            (and (= 7 (.countUsed pool1))
                 (= 12 (.poolSize pool1)))) "pool,grow")
  (ensure (let [x (.take pool1)]
            (and (.get x Leg)
                 (= 2 (n# (.getAll x)))
                 (.has? x Leg)
                 (.has? x Arm))) "pool,entity methods")
  (ensure (let [a (n# (.find engine Arm))
                b (n# (.find engine Leg))
                c (n# (.find engine Arm Leg))
                d (n# (.find engine ecs/Component))]
            (and (= a b)
                 (= b c)
                 (zero? d)
                 (pos? a))) "engine,find")
  (ensure (K/eq? [1 2 3]
                 (let [x (.addSystem engine sys1)
                       y (.addSystem engine sys2)
                       z (.addSystem engine sys3)]
                   (.ignite engine prologue')
                   (.update engine 10)
                   TEMP-VAR)) "engine,addSystem,ignite"))



(println (runtest ecs-test "test: ecs"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF




