;; Copyright (c) 2013-2018, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc ""
      :author "Kenneth Leung"}

  czlab.elmo.ecs.Ecs

  (:require ["kirby"
             :as K
             :refer [sort! nichts? not-empty
                     objClass some? opt?? conj! MAX-INT]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- system-comparator
  "sort low->high" [x y]
  (if (< x.priority y.priority) -1
    (if (> x.priority y.priority) 1 0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype EntityPool []

  (constructor [name engine entity batch]
    (assign! this
             :name name :size 0 :next 0
             :engine engine
             :inuse 0 :slots []
             :entity entity :batch batch))

  (take [&args]
    ;no free slot? make more
    (if (>= @@next @@size) (@@grow ))
    ;take a free object, set it's slot, up the pool's free ptr
    (var ent (nth @@slots @@next))
    (assign! ent
             :status #t
             :slot @@next)
    (assign! this
             :next (+1 @@next)
             :inuse (+1 @@inuse))
    ;re-condition the object as new
    (.apply @@engine.checkin @@engine (concat [ent] args)))

  (grow ^:private []
    ;make more
    (dotimes [x @@batch]
      (conj! @@slots (new @@entity @@engine)))
    ;up the size
    (assign! this :size (+ @@batch @@size)))

  (countUsed [] @@inuse)
  (poolSize [] @@size)

  (drop [ent]
    ;jiggle the free slot to reuse the one just
    ;dropped
    (when (.-status ent)
      (.checkout @@engine ent)
      (assign! this
               :next (-1 @@next)
               :inuse (-1 @@inuse))
      (var tail (nth @@slots @@next)
           slot' (get tail :slot)
           epos' (get ent :slot))
      ;set the free ptr to the dropped
      ;move the tail to old slot
      (aset @@slots @@next ent epos' tail)
      ;swap the 2 slots
      (assign! tail :slot epos')
      (assign! ent :slot slot' :status #f))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype Component []
  (constructor [&[e]]
    (assign! this
             :tpid ""
             :entity (opt?? e nil))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const SystemPriority {
  :PreUpdate 100
  :NetPlay 200
  :AI 300
  :Motion 400
  :Move 500
  :Logic 600
  :Collide 700
  :Resolve 800
  :Render 900
  :Error -1 })

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;engine
(def- lastId 0)
(defn- generateEid "" [pfx]
  (var rc (++ lastId))
  (if-not (< rc MAX-INT) (raise! "too many entities")) (str pfx rc))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype Engine []

  (constructor [&[cfg]]
    (assign! this
             :config (opt?? cfg nil)
             :updating? #f
             :pools []
             :systems [] :ents {} :types {}))

  (checkout [ent]
    (.finz ent)
    (dissoc! @@ents ent.eid) ent)

  (checkin [ent & args]
    (apply ent.init ent args)
    (assoc! @@ents ent.eid ent) ent)

  (unbind [cid ent]
    {:pre [(some? cid)(some? ent)]}
    (when-some [m (get @@types cid)] (dissoc! m ent.eid)) nil)

  (bind [co ent]
    {:pre [(some? co)(some? ent)]}
    (var z (objClass co)
         m (get @@types z))
    (when (nichts? m)
      (set! m {})
      (assoc! @@types z m))
    (assoc! m ent.eid co) nil)

  (find [&comTypes]
    (var pmin MAX-INT
         missed? #f pm nil ccs [] ret [])
    ;;find shortest cache, doing an intersection
    (var~ pmks ccsz eid cid c sum)
    (for [i 0 sz (n# comTypes)
          :while (< i sz) :recur (+1 i)]
      (set! cid (.@i comTypes)
            c (get @@types cid))
      (cond
        (nichts? c) (do->break! (true! missed?))
        :else
        (do (when (< (n# c) pmin)
              (set! pmin (n# c) pm c))
            (conj! ccs c))))
    ;;use the shortest cache as the baseline
    (set! ccsz (n# ccs))
    (when (and (> ccsz 0)
               (not missed?))
      (set! pmks (keys pm))
      (for [i 0 sz (n# pmks)
            :while (< i sz) :recur (+1 i)]
        (set! sum 0
              eid (.@i pmks))
        ;; look for intersection
        (for [j 0 :while (< j ccsz) :recur (+1 j)]
          (set! c (.@j ccs))
          (if (= c pm)
            (++ sum)
            (if (get c eid) (++ sum))))
        ;; if found in all caches...
        (if (= sum ccsz) ;; all matched
          (if-some [e (get @@ents eid)] (conj! ret e))))) ret)

  (comment
  (addSystem [priority func]
    (var s (object :priority priority :cb func))
    (conj! @@systems s)
    (sort! system-comparator @@systems) s))

  (addSystem [func]
    (conj! @@systems func) func)

  (update [time]
    (assign! this :updating? #t)
    (try
      (each #(%1 this time) @@systems)
      (finally
        (assign! this :updating? #f))) nil)

  (ignite [prologue]
    (prologue this)
    (each #(%1 this -1) @@systems) nil))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype Entity []

  (constructor [engine &[name]]
    (assign! this
             :slot -1
             :status #t
             :name (opt?? name "")
             :comps {}
             :engine engine
             :eid (generateEid "ent:")))

  (init [&args] (raise! "you need to override this"))

  (checkin [co]
    {:pre [(some? co)]}
    (var z (objClass co))
    (assert (not (.has? this z)) "Cannot add co twice")
    (.bind @@engine co this)
    (assign! co :entity this)
    (assoc! @@comps z co) co)

  (checkout [&comTypes]
    (doseq [c comTypes]
      (when-some [co (get @@comps c)]
        (dissoc! @@comps c)
        (.unbind @@engine co this))) nil)

  (get [comType] (get @@comps comType))
  (getAll [] (values @@comps))
  (has? [comType] (some? (get @@comps comType))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

