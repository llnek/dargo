/*Auto generated by Kirby v1.0.0 - Mon Feb 05 2018 02:48:06 GMT-0800 (PST)
  

*/

const ecs = require("./Ecs");
const K = require("kirby");
const conj_BANG = K["conj_BANG"];
const some_QMRK = K["some_QMRK"];
const println = K["println"];
const runtest = K["runtest"];
const kirbystdlibref = require("kirby");
const __module_namespace__ = "czlab.elmo.ecs.test";
class Leg extends ecs.Component {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: test.ky, line: 20
  constructor() {
    let GS__4 = Array.prototype.slice.call(arguments, 0);
    let n = GS__4[0];
    super(n);
    (this["tpid"] = "leg", this["length"] = 50);
    return this;
  }
}
class Arm extends ecs.Component {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: test.ky, line: 25
  constructor() {
    let GS__5 = Array.prototype.slice.call(arguments, 0);
    let n = GS__5[0];
    super(n);
    (this["tpid"] = "arm", this["length"] = 10);
    return this;
  }
}
class Person extends ecs.Entity {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: test.ky, line: 30
  constructor(e) {
    super(e);
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [finz] in file: test.ky, line: 31
  finz() {
    return this.checkout(Arm, Leg);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [init] in file: test.ky, line: 33
  init() {
    let args = Array.prototype.slice.call(arguments, 0);
    this.checkin(new Arm(this));
    return this.checkin(new Leg(this));
  }
}
const engine = new ecs.Engine();
const pool1 = new ecs.EntityPool("p1", engine, Person, 6);
var TEMP_DASH_VAR = null;
////////////////////////////////////////////////////////////////////////////////
//fn: [prologue'] in file: test.ky, line: 44
const prologue_QUOT = function(engine) {
  return (TEMP_DASH_VAR = []);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [sys1] in file: test.ky, line: 45
const sys1 = function(e, t) {
  return (((t > 0)) ?
    conj_BANG(TEMP_DASH_VAR, 1) :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [sys2] in file: test.ky, line: 46
const sys2 = function(e, t) {
  return (((t > 0)) ?
    conj_BANG(TEMP_DASH_VAR, 2) :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [sys3] in file: test.ky, line: 47
const sys3 = function(e, t) {
  return (((t > 0)) ?
    conj_BANG(TEMP_DASH_VAR, 3) :
    null);
};
const ecs_DASH_test = function() {
  let ____args = Array.prototype.slice.call(arguments);
  return [kirbystdlibref.ensureTest(((pool1.poolSize() === 0)), "pool,size=0"), kirbystdlibref.ensureTest((function() {
    let x = pool1.take();
    let y = pool1.take();
    let z = pool1.take();
    return (3 === pool1.countUsed());
  }).call(this), "pool,used"), kirbystdlibref.ensureTest((function() {
    let x = pool1.take();
    let y = pool1.take();
    let z = pool1.take();
    pool1.drop(z);
    return (5 === pool1.countUsed());
  }).call(this), "pool,drop"), kirbystdlibref.ensureTest((6 === pool1.poolSize()), "pool,size>0"), kirbystdlibref.ensureTest((function() {
    let x = pool1.take();
    let y = pool1.take();
    let z = pool1.take();
    pool1.drop(x);
    return ((7 === pool1.countUsed()) && (12 === pool1.poolSize()));
  }).call(this), "pool,grow"), kirbystdlibref.ensureTest((function() {
    let x = pool1.take();
    return (x.get(Leg) && (2 === kirbystdlibref.count(x.getAll())) && x.has_QMRK(Leg) && x.has_QMRK(Arm));
  }).call(this), "pool,entity methods"), kirbystdlibref.ensureTest((function() {
    let a = kirbystdlibref.count(engine.find(Arm));
    let b = kirbystdlibref.count(engine.find(Leg));
    let c = kirbystdlibref.count(engine.find(Arm, Leg));
    let d = kirbystdlibref.count(engine.find(ecs.Component));
    return ((a === b) && (b === c) && ((d === 0)) && ((a > 0)));
  }).call(this), "engine,find"), kirbystdlibref.ensureTest(K.eq_QMRK([1, 2, 3], (function() {
    let x = engine.addSystem(sys1);
    let y = engine.addSystem(sys2);
    let z = engine.addSystem(sys3);
    engine.ignite(prologue_QUOT);
    engine.update(10);
    return TEMP_DASH_VAR;
  }).call(this)), "engine,addSystem,ignite")];
};
println(runtest(ecs_DASH_test, "test: ecs"));
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.elmo.ecs.test",
    macros: {}
  },
  Leg: Leg,
  Arm: Arm,
  Person: Person,
  ecs_DASH_test: ecs_DASH_test
};