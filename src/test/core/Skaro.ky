;; Copyright (c) 2013-2018, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc ""
      :author "Kenneth Leung"}

  czlab.elmo.core.Skaro

  (:require ["crypto-js"])
  (:require
            ["kirby"
             :as K :refer [str not-empty]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const global (if (undef? window) (object) window))
(def~ CjsBase64 CjsUtf8)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(if (undef? HTMLElement)
  (assign! global :HTMLElement #(nil)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(if-not (undef? CryptoJS)
  (assign! global :CryptoJS CryptoJS))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(when (some? global.CryptoJS)
  (set! CjsBase64 global.CryptoJS.enc.Base64
        CjsUtf8 global.CryptoJS.enc.Utf8))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn strPadRight "" [src len pad]
  (-> (str src (.repeat pad (+1 len)))
      (.slice 0 len)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn strPadLeft "" [src len pad]
  (-> (str (.repeat pad (+1 len)) src)
      (.slice (- len))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn ssplit
  "Safe split string." [s sep]
  (filter #(not-empty %) (.split (or s "") sep)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn now
  "Get the current time." []
  (or Date.now #(.getTime (new Date))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn capitalize
  "Capitalize the first char of the string."
  [s]
  (str (.toUpperCase (ch@ s 0)) (.slice s 1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn randRange
  "Pick a random number between these 2 limits."
  [from to]

  (Math/floor (+ from
                 (* (Math/random) (+1 (- to from))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn prettyNumber
  "Maybe pad the number with zeroes."
  [num digits]

  (strPadLeft (numStr num) digits "0"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getWebSockProtocol
  "Get the websocket transport protocol."
  [secure?]
  (if secure? "wss://" "ws://"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn nowMillis
  "Get the current time in milliseconds."
  []
  (.getTime (new Date)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn boolify
  "Cast the value to boolean." [obj] (if obj true false))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn isSSL?
  "Returns true if the web address is ssl."
  []
  (if (and (def? window)
           (.-location window))
    (>= (.indexOf window.location.protocol "https") 0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn fmtUrl
  "Format a URL based on the current web address host."
  [scheme uri]
  (if (and (def? window)
           (.-location window))
    (str scheme (.-host window.location) uri) ""))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn isMobile?
  "Test if the client is a mobile device."
  [navigator]

  (if (some? navigator)
    (.test #/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i (.-userAgent navigator))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn isSafari
  "Test if the client is Safari browser."
  [navigator]

  (if (some? navigator)
    (and (.test #/Safari/
                (.-userAgent navigator))
         (.test #/Apple Computer/ (.-vendor navigator)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn pde
  "Prevent default propagation of this event."
  [e]
  (when (some? e)
    (if (e.preventDefault)
      (.preventDefault e)
      (assign! e :returnValue false))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn randSign
  "Randomly pick positive or negative."
  []
  (if (< (Math/random) 0.5) -1 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn randArrayItem
  "Randomly choose an item from this array."
  [arr]
  (cond
    (empty? arr) undefined
    (single? arr) (_1 arr)
    :else
    (nth arr
         (Math/floor (* (alen arr) (Math/random))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn randPercent
  "Randomly choose a percentage in step of 10."
  []
  (randArrayItem [0.1,0.9,0.3,0.7,0.6,0.5,0.4,0.8,0.2]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn rand
  "Pick a random number."
  [limit]
  (Math/floor (* limit (Math/random))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn toBasicAuthHeader
  "Format input into HTTP Basic Authentication."
  [user pwd]
  (conj! []
         "Authorization"
         (str "Basic " (b64Encode (str "" user ":" pwd)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn toUtf8
  "Convert string to utf-8 string."
  [s]
  (.stringify CjsUtf8 (.parse CjsUtf8 s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn b64Encode
  "Base64 encode the string."
  [s]
  (.stringify CjsBase64 (.parse CjsUtf8 s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn b64Decode
  "Base64 decode the string."
  [s]
  (.stringify CjsUtf8 (.parse CjsBase64 s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn removeFromArray
  "Maybe remove this item from this array."
  [arr item]
  (var index (.indexOf arr item))
  (while (not= index -1)
    (.splice arr index 1)
    (set! index (.indexOf arr item))) arr)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF



