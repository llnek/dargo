;; Copyright (c) 2013-2018, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc ""
      :author "Kenneth Leung"}

  czlab.elmo.core.CCSX

  (:require ["kirby"
             :as K :refer [conj!]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn popScene "" [] (.popScene cc/director))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn randomPos "" [node]
  (var {:keys [right top]} (visBox))
  (.setPosition node (randInt right) (randInt top)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn mkHMenu "" [items pad] (mkMenu items #f pad))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn mkVMenu "" [items pad] (mkMenu items #t pad))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- mkMenu
  "Menu-items should be same size"
  [items vert? pad]
  (var menu (.create cc/Menu))
  (each #(.addChild menu %) items)
  (if vert?
    (.alignItemsVerticallyWithPadding menu pad)
    (.alignItemsHorizontallyWithPadding menu pad))
  menu)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn menuOneItem "" [item]
  (doto (.create cc/Menu)
    (.addChild item)
    (.setPosition 0 0)
    (.setAnchorPoint *anchor-bl*)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn isDesktop "" [] (raise! "TBD"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- splitHexColor "" ^Array [rgbstr]
  (var f #/^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
       s #/^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])$/
       len (n# rgbstr)
       arr (or (.exec f rgbstr)
               (.exec s rgbstr)))
  (when arr
    (set! arr (slice arr 1))
    (map #(parseInt (str "0x" %))
         (if (= len 4) (map #(str % %) arr) arr))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn colorRGB "" [rgbstr]
  ;(var [r g b] (splitHexColor rgbstr)) (cc/color r g b))
  (cc/hexToColor rgbstr))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn sfxMusic "" [music repeat?]
  (try (.playMusic cc/audioEngine music repeat?)
       (catch e (cc/warn (cc/formatStr
                           "Failed to play music: %s" music)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn sfxEffect "" [sound]
  (try (.playEffect cc/audioEngine sound)
       (catch e (cc/warn (cc/formatStr
                           "Failed to play sound: %s" sound)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn pauseAudio "" [effects? music?]
  (if music? (.pauseMusic cc/audioEngine))
  (if effects? (.pauseAllEffects cc/audioEngine)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn resumeAudio "" [effects? music?]
  (if music? (.resumeMusic cc/audioEngine))
  (if effects? (.resumeAllEffects cc/audioEngine)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn stopAudio "" [effects? music?]
  (if music? (.stopMusic cc/audioEngine))
  (if effects? (.stopAllEffects cc/audioEngine)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn calcOffsets "" [sz]
  (cc/size (/ sz.width *golden-ratio*)
           (/ sz.height *golden-ratio*)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createSSheetNode "" [image]
  (->> (.addImage cc/textureCache image)
       (.createWithTexture cc/SpriteBatchNode )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createAudioMItems "" [&[onIcon ovIcon]]
  (set! ovIcon (opt?? ovIcon "sound_off.png")
        onIcon (opt?? onIcon "sound_on.png"))
  [(createMenuBtn ovIcon ovIcon)
   (createMenuBtn onIcon onIcon)])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createAudioMImages "" [&[onIcon ovIcon]]
  (set! ovIcon (opt?? ovIcon "sound_off.png")
        onIcon (opt?? onIcon "sound_on.png"))
  [(createMenuImg ovIcon ovIcon)
   (createMenuImg onIcon onIcon)])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn calcDist "" [a b]
  (cc/pDistance (.getPosition a)
                (.getPosition b)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn normalize "" [a b]
  (cc/pNormalize (cc/pSub (.getPosition b)
                          (.getPosition a))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createMenuText "" [fnt txt color & [pointSize]]
  (var z (if (some? pointSize)
           (createTTFLabel fnt pointSize txt) (createBMFLabel fnt txt)))
  (.setColor z color)
  (.create cc/MenuItemLabel z))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createMenuBtn "" [frame? normal & [selected]]
  (set! selected (opt?? selected normal))
  (if frame?
    (.create cc/MenuItemSprite
             (createSprite normal) (createSprite selected))
    (.create cc/MenuItemImage
             (xcfg/getImage normal) (xcfg/getImage selected))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn pointInBox?
  "Test if this point is inside this rectangle"
  [box x & [y]]
  ;x is a point and y is not set
  (when-not (number? x)
    (set! y x.y x x.x))
  (and (>= x box.left)
       (<= x box.right)
       (>= y box.bottom) (<= y box.top)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createTextLabel "" [fnt txt & [pointSize]]
  (if (some? pointSize)
    (new cc/LabelTTF txt fnt pointSize)
    (new cc/LabelBMFont txt fnt)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn sprite? "" [s] (inst? cc/Sprite s))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn collide?
  "Test collision of 2 sprites"
  [a b]
  (if (and a b) (.intersectsRect (bbox a) (bbox b)) #f))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setDevRes "" [x y policy]
  (-> (.getOpenGLView cc/director)
      (.setDesignResolutionSize x y policy)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn isTapped? "" [node tap]
  (var d (.distance tap (.getPosition node))
       {:keys [width height]} (.getBoundingBox node))
  (or (<= d (* 0.8 width))
      (<= d (* 0.8 height))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn deltaX "" [a b] (- (.getPositionX a) (.getPositionX b)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn deltaY "" [a b] (- (.getPositionY a) (.getPositionY b)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn isPortrait? "" [] (var s (screenSize)) (> s.height s.width))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn readPlist "" [url]
  (->> (.getStringFromFile jsb/fileUtils url) (.parse cc/plistParser )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn readJson "" [url] (JSON/parse (.getStringFromFile jsb/fileUtils url)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(comment
(defn outOfBound? "" [node B]
  (if node (outOfBound (bbox4 node) B) #f)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn outOfBound? "" [a B]
  (and (inst? Box4 a)
       (inst? Box4 B)
       (or (> a.left B.right)
           (< a.top B.bottom)
           (< a.right B.left)
           (> a.bottom B.top))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn scaleSize "" [z scale] (cc/size (* z.width scale) (* z.height scale)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn undoTimer "" [tm] (if tm (.release tm)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createTime
  "Create a timer action"
  [par millis]
  (var t (.create cc/DelayTime (/ millis 1000.0)))
  (.retain t)
  (.runAction par t)
  t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn timerDone? "" [t] (if t (.isDone t) undefined))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createAnimation "" [dpu loops restore?]
  (doto (.create cc/Animation)
    (.setDelayPerUnit dpu)
    (.setLoops loops)
    (.setRestoreOriginalFrame restore?)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createSpriteFromPath
  "Create a sprite." [path name] (new cc/Sprite (str path "/" name)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createSprite "Create a sprite." [name] (new cc/Sprite name))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn bbox4 "" [n]
  (var r (.getBoundingBox n))
  (Box4 (+ r.y r.height) (+ r.x r.width) r.y r.x))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn runEx "" [s & [delay]] (run s delay))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn run "" [s & [delay]]
  (if (number? delay)
    (->> (.create cc/TransitionCrossFade delay s)
         (.replaceScene cc/director))
    (.replaceScene cc/director)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn pushScene "" [s & [delay]]
  (.pushScene cc/director
      (.create cc/TransitionCrossFade delay s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn isTransitioning? "" [] (some? (.getRunningScene cc/director)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn calcSize
  "Find size of this sprite"
  [frame]
  (var b (.getBoundingBox (createSprite frame)))
  (cc/size b.width b.height))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn halfHW
  "Calculate halves of width and height of this sprite"
  [s]
  (var b (.getBoundingBox s))
  (cc/size (* 0.5 b.width) (* 0.5 b.height)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn bbox
  "Rectangle from this sprite" [s] (.getBoundingBox s))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getHeight "" [s] (.-height (.getBoundingBox s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getWidth "" [s] (.-width (.getBoundingBox s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getContentHeight "" [s] (.-height (.getContentSize s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getContentWidth "" [s] (.-width (.getContentSize s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn get-XXX "" [s px bound]
  (var w (.-width (.getBoundingBox s))
       a (.-x (.getAnchorPoint s)))
  (+ px (* w (- bound a))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn get-YYY "" [s py bound]
  (var h (.-height (.getBoundingBox s))
       a (.-y (.getAnchorPoint s)))
  (+ py (* h (- bound a))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getLeft "" [s]
  (get-XXX s (.-x (.getPosition s)) (.-x *anchor-l*)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getRight "" [s]
  (get-XXX s (.-x (.getPosition s)) (.-x *anchor-r*)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getBottom "" [s]
  (get-YYY s (.-y (.getPosition s)) (.-y *anchor-b*)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getTop "" [s]
  (get-YYY s (.-y (.getPosition s)) (.-y *anchor-t*)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn centerX
  "x pos of the center of the visible screen" [] (.-x (centerPoint)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn centerY
  "y pos of the center of the visible screen." [] (.-y (centerPoint)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn centerPoint
  "Get the center of the visible screen"
  []
  (var pt (visOrigin)  sz (visSize))
  (cc/p (+ pt.x (HWZ sz.width)) (+ pt.y (HHZ sz.height))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn screenHeight
  "Get the screen height" [] (.-height (screenSize)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn screenWidth
  "Get the screen width" [] (.-width (screenSize)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn visOrigin "" [] (-> cc/director (.getOpenGLView) (.getVisibleOrigin)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn visSize "" [] (-> cc/director (.getOpenGLView) (.getVisibleSize)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn visBox
  "Get the visible screen box" []
  (var pt (visOrigin) sz (visSize))
  (new Box4 (+ pt.y sz.height) (+ pt.x sz.width) pt.y pt.x))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn screenSize
  "Get the actual window/frame size." []
  (-> cc/director (.getOpenGLView)(.getFrameSize)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn vboxMID
  "Get the center of this box." [box]
  (cc/p (+ box.left (* 0.5 (- box.right box.left)))
        (+ box.bottom (* 0.5 (- box.top box.bottom)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn traceEnclosure
  "Test if this box is hitting boundaries
  rect.x & y are center positioned
  If hit, the new position and velocities
  are returned"
  [dt bbox rect vel]

  (var sz (- rect.top rect.bottom) ;height
       sw (- rect.right rect.left) ;width
       y (+ rect.bottom
            (* sz 0.5) (* dt vel.y)) ;new y
       x (+ rect.left
            (* sw 0.5) (* dt vel.x)) ;new x
       vx vel.x vy vel.y hit? #f)
  (cond
    (> (+ y sz) bbox.top) ;;hitting top wall
    (set! y (- bbox.top sz)
          vy (- vy)
          hit? #t)
    (< (- y sz) bbox.bottom) ;;hitting bottom wall
    (set! y (+ bbox.bottom sz)
          vy (- vy)
          hit? #t))
  (cond
    (> (+ x sw) bbox.right) ;;hitting right wall
    (set! x (- bbox.right  sw)
          vx (- vx)
          hit? #t)
    (< (- x sw) bbox.left) ;;hitting left wall
    (set! x  (+ bbox.left  sw)
          vx (- vx)
          hit? #t))
  ;return new position and velocity
  {:hit?  hit?
   :pos (cc/p x y)
   :vel (cc/p vx vy)})

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn isIntersect? "" [a1 a2]
  (not (or (> a1.left a2.right)
           (> a2.left a1.right)
           (< a1.top a2.bottom)
           (< a2.top a1.bottom))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const *scac* (fn [&xs]
                (var that cc.spriteFrameCache)
                (that.getSpriteFrameByName.apply that xs)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getSpriteFrame
  "Get the sprite from the frame cache
  using its id (e.g. #ship)"
  [frameid & [rect]]
  (var f (*scac* frameid))
  (if f (if rect (.setRect f rect))) f)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const *anchor-c*  (cc/p 0.5 0.5))
(const *anchor-t*  (cc/p 0.5 1))
(const *anchor-tr* (cc/p 1 1))
(const *anchor-r* (cc/p 1 0.5))
(const *anchor-br* (cc/p 1 0))
(const *anchor-b* (cc/p 0.5 0))
(const *anchor-bl* (cc/p 0 0))
(const *anchor-l* (cc/p 0 0.5))
(const *anchor-tl* (cc/p 0 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const *csize* (fn [s]
                 (var b (.getBoundingBox s))
                 (cc/size b.width b.height)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn resolveElastic
  "not used for now."
  [obj1 vel1 obj2 vel2]
  (var pos2 (.getPosition obj2)
       pos1 (.getPosition obj1)
       sz2 (*csize* obj2)
       sz1 (*csize* obj1)
       hh1 (HHZ sz1)
       hw1 (HWZ sz1)
       x pos1.x
       y pos1.y
       bx2 (bbox4 obj2)
       bx1 (bbox4 obj1))
  (cond
    ;; coming from right
    (and (< bx1.left bx2.right)
         (< bx2.right bx1.right))
    (do (assoc! vel2 :x (- (fabs vel2.x)))
        (assoc! vel1 :x (fabs vel1.x))
        (set! x (+ (getRight obj2) hw1)))

    ;; coming from left
    (and (> bx1.right bx2.left)
         (< bx1.left bx2.left))
    (do (assoc! vel1 :x (- (fabs vel1.x)))
        (assoc! vel2 :x (fabs vel2.x))
        (set! x (- (getLeft obj2) hw1)))
    ;; coming from top
    (and (< bx1.bottom bx2.top)
         (> bx1.top bx2.top))
    (do (assoc! vel2 :y (- (fabs vel2.y)))
        (assoc! vel1 :y (fabs vel1.y))
        (set! y (+ (getTop obj2) hh1)))
    ;; coming from bottom
    (and (> bx1.top bx2.bottom)
         (> bx2.bottom bx1.bottom))
    (do (assoc! vel1 :y (- (fabs vel1.y)))
        (assoc! vel2 :y (fabs vel2.y))
        (set! y (- (getBottom obj2) hh1))))
  ;(.updatePosition obj1 x y)
  nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn clamp3 "" [loc sz world]
  (var hh (HHZ sz)
       hw (HWZ sz)
       x loc.x
       y loc.y)
  (if (> (+ loc.x hw) world.right)
    (set! x (- world.right hw)))
  (if (< (- loc.x hw) world.left)
    (set! x (+ world.left hw)))
  (if (< (- loc.y hh) world.bottom)
    (set! y (+ world.bottom hh)))
  (if (> (+ loc.y hh) world.top)
    (set! y (- world.top hh)))
  (cc/p x y))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn clamp2 "" [cur bx]
  (cc/pClamp cur
             (cc/p bx.left bx.bottom)
             (cc/p bx.right bx.top)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn randInt "" [upper]
  (Math/floor (* upper (cc/ramdom0To1))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn randFloat
  "" [upper] (* upper (cc/ramdom0To1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn randSign "" []
  (if (> (cc/ramdom0To1) 0.5) 1 -1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn rand "" [] (cc/ramdom0To1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn degToRad
  "" [deg] (* deg (/ Math/PI 180)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn timeInMillis "" [] (.getTime (new Date)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn calcXY
  "quadrants =  4 | 1
               --------
                3 | 2"
  [angle hypot]

  (var~ theta q x y)
  (cond
    (and (>= angle 0)
         (<= angle 90))
    (set! theta (degToRad (- 90 angle))
          x (cos theta)
          y (sin theta)
          q 1)
    (and (>= angle 90)
         (<= angle 180))
    (set! theta (degToRad (- angle 90))
          x (cos theta)
          y (- (sin theta))
          q 2)
    (and (>= angle 180)
         (<= angle 270))
    (set! theta (degToRad (- 270 angle))
          x (- (cos theta))
          y (- (sin theta))
          q 3)
    (and (>= angle 270)
         (<= angle 360))
    (set! theta (degToRad (- angle 270))
          x (- (cos theta))
          y (sin theta)
          q 4))
  (cc/p (* x hypot) (* y hypot)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn throttle "" [func wait]
  (var previous  0)
  (fn []
    (var now (timeInMillis))
    (if (zero? previous)
      (set! previous now))
    (var remaining (- wait (- now previous)))
    (when (or (<= remaining 0)
              (> remaining wait))
      (set! previous now)
      (func))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn testCollideEntity "" [p1 ent]
  (when (get ent :status)
    (.foreach p1
              (fn [e]
                (testCollideEntities e ent)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn testCollidePools "" [p1 p2]
  (.foreach p1
            (fn [e1]
              (.foreach p2
                        (fn [e2]
                          (testCollideEntities e1 e2))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn testCollideEntities "" [e1 e2]
  (var s2 (.get e2 :pixie)
       s1 (.get e1 :pixie))
  (when (and (get e2 :status)
             (get e1 :status)
             (collide s2 s1))
    (.hurt (get e2 :health))
    (.hurt (get e1 :health))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn hibernate "" [ent]
  (var s (get ent :pixie))
  (if s (.deflate s))
  (.drop! ent))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn resurrect "" [ent x y]
  (var h (get ent :health)
       s (get ent :pixie))
  (if s (.inflate s x y))
  (if h (.reset h))
  (.take! ent))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn kumakaze "" [ent]
  (var h (get ent :health))
  (if h
    (assoc! h :curHP 0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn resolveEntities "" [pool]
  (.foreach pool
            (fn [e]
              (when (get e :status)
                (var ht (get e :health))
                (if (and ht
                         (not (get ht :alive?)))
                  (hibernate e))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

